# 多智能体小说写作原型 - 产品需求文档 (PRD V1.0)

## 1. 目标与背景上下文 (Goals and Background Context)

### 1.1. MVP 目标 (Goals)

此MVP原型的核心目标是**验证**，而非生产。我们旨在通过一个功能聚焦的版本来回答项目中最关键的未知问题。具体目标如下：

* **技术验证:** 证明我们设想的“世界记忆”（Milvus + Neo4j）与多智能体协作架构，能够有效解决长篇叙事的**连贯性问题**。
* **质量验证:** 产出一部高质量、逻辑自洽的**10万字**中篇故事，以此作为评估内容质量的基准。
* **成本验证:** 精确测量并记录生成该体量内容所需的大模型API **Token消耗量和总费用**，为未来的商业模式提供真实数据。
* **流程验证:** 测试并优化从“情节规划”到“章节生成”再到“评估修订”的核心自动化工作流程。

### 1.2. 背景上下文 (Background Context)

此前的可行性分析证实，全自动化的长篇小说创作项目具备巨大的市场潜力，但也面临着叙事连贯性、内容质量和API成本三大核心挑战。直接开发完整系统风险过高。

因此，本PRD将范围限定在一个最小可行产品（MVP）上。该MVP旨在通过一次受控的实验，优先解决上述核心挑战，为项目是否值得全面投入提供决定性的数据支持。本次原型的成功，将是通往500万字宏伟目标的坚实第一步。

## 2. 需求 (Requirements)

### 2.1. 功能性需求 (Functional Requirements)

* **FR1: 世界观设定功能 (World Bible Setup)**
    * 系统必须提供一个用户界面（UI），允许人工监督员输入、编辑和管理小说的核心世界观，包括主要角色设定、世界背景、关键物品和基本规则。
* **FR2: 核心智能体实现 (Core Agent Implementation)**
    * 系统必须至少实现以下三个核心智能体作为独立的微服务：
        * **写作Agent (WriterAgent):** 负责根据指令生成章节初稿。
        * **评论家Agent (CriticAgent):** 负责评估初稿的质量、逻辑性和趣味性，并生成结构化的评分和修改建议。
        * **修订Agent (RewriterAgent):** 负责根据评论家Agent的建议对初稿进行修订。
* **FR3: “世界记忆”交互 (“World Memory” Interaction)**
    * 所有智能体在执行任务时，都必须能查询Milvus和Neo4j中的“世界记忆”，以保证生成内容的连贯性。
    * 写作和修订Agent完成工作后，必须将新生成的情节和设定要点更新到“世界记忆”中。
* **FR4: 自动化编排流程 (Automated Orchestration Flow)**
    * 系统必须使用Prefect实现核心的“写作-评估-修订-批准”自动化工作流。
    * 当一个章节被人工批准后，流程应能自动触发下一章节的写作请求。
* **FR5: 人工监督与干预界面 (Human Supervision & Intervention UI)**
    * UI必须能展示生成的章节初稿、评论家Agent的评分与建议、以及修订稿。
    * 人工监督员必须能通过UI执行操作：**批准章节**、**否决章节**或**提出具体的修改意见并触发新一轮修订**。
* **FR6: 成本与性能仪表盘 (Cost & Performance Dashboard)**
    * 系统需要一个简单的仪表盘，实时显示项目的关键指标：累计消耗的Token数量、预估的API费用、以及平均每章节的生成时间。
* **FR7: 最终文稿导出 (Final Manuscript Export)**
    * 系统需提供一个功能，能将所有已批准的章节按正确顺序编译和导出一个完整的 `.txt` 或 `.md` 格式的文稿。

### 2.2. 非功能性需求 (Non-Functional Requirements)

* **NFR1: 叙事连贯性 (Narrative Coherence)**
    * 这是MVP最重要的质量标准。最终生成的10万字故事，在主要情节、人物行为和世界设定上不得出现明显的逻辑矛盾。
* **NFR2: 过程可追溯性 (Process Traceability)**
    * 每一次API调用、Agent的决策过程和版本迭代都必须被完整记录在Langfuse中，以便于分析、调试和优化。
* **NFR3: 模块化与可扩展性 (Modularity & Scalability)**
    * 每个智能体服务都应被设计为可独立部署、测试和升级的模块，为未来增加更多类型的Agent（如对话Agent、情节规划Agent）奠定基础。
* **NFR4: 技术栈一致性 (Tech Stack Adherence)**
    * 项目实现必须严格遵守已定义的技术栈（后端FastAPI, 前端React+TS等），不得引入未经批准的技术。
* **NFR5: 默认安全 (Security by Default)**
    * 所有API端点必须默认受保护，需要经过认证和授权才能访问。
* **NFR6: 凭证管理 (Credential Management)**
    * 系统不得在代码或日志中硬编码任何敏感凭证（如API密钥）。

## 3. 用户界面设计目标 (User Interface Design Goals)

### 3.1. 整体用户体验愿景 (Overall UX Vision)

本项目的用户界面（UI）应被设计为一个**专业、高效的“创作指挥中心”**。其核心目标不是华丽的视觉效果，而是**信息的清晰呈现**和**决策的便捷性**。用户体验应类似于一个为专业人士打造的数据分析工具或集成开发环境（IDE），强调功能性、响应速度和易用性。

### 3.2. 关键交互模式 (Key Interaction Paradigms)

* **仪表盘驱动:** 用户登录后进入一个中心仪表盘，直观了解整个小说创作项目的宏观状态。
* **线性审查流程:** 针对章节的“初稿 → 评估 → 修订稿”流程，应以清晰、线性的方式呈现，并提供明确的“批准”、“否决”或“再次修订”操作按钮。
* **上下文反馈:** 在审查界面，应允许用户直接高亮部分文本，并添加具体的修改批注，以供“修订Agent”参考。

### 3.3. 核心屏幕与视图 (Core Screens and Views)

1.  **项目仪表盘 (Project Dashboard)**
2.  **世界观编辑器 (World Bible Editor)**
3.  **章节审查视图 (Chapter Review View)**
4.  **最终文稿阅读器 (Manuscript Viewer)**

### 3.4. 可访问性 (Accessibility)

建议遵循 **WCAG 2.1 AA** 标准作为基线，确保界面对于长时间工作的监督员来说清晰易读，并支持键盘操作等基本的可访问性功能。

### 3.5. 品牌与风格 (Branding & Style)

* **风格:** 建议采用简洁、专业的“工具风格”。可优先考虑提供一个舒适的暗色模式（Dark Mode）。排版上，关键数据和代码片段可使用等宽字体以提高辨识度。
* **品牌:** 除非您有特定的品牌指南，否则我们将专注于功能性，保持品牌元素最小化。

### 3.6. 目标设备与平台 (Target Device and Platforms)

* **平台:** 响应式Web应用。
* **目标设备:** 主要针对**桌面端浏览器**进行优化。

## 4. 技术假设 (Technical Assumptions)

### 4.1. 仓库与服务架构 (Repository & Service Architecture)

* **仓库结构 (Repository Structure):** **Monorepo (单一代码库)**
* **服务架构 (Service Architecture):** **事件驱动的Sidecar微服务模式 (Event-Driven Sidecar Micro-Service)**

### 4.2. 技术栈详情 (Technology Stack Details)

| 类别 (Category) | 技术选型 (Technology) |
| :--- | :--- |
| **后端语言** | Python |
| **后端Web框架** | FastAPI |
| **数据校验** | Pydantic |
| **前端框架** | React + TypeScript |
| **前端UI库** | shadcn/ui + Tailwind CSS |
| **前端构建/状态/路由** | Vite, Zustand, React Router, TanStack Query |
| **工作流编排** | Prefect |
| **事件总线** | Kafka |
| **数据库** | PostgreSQL, Milvus, Neo4j |
| **对象存储** | Minio |
| **缓存** | Redis |
| **LLM可观测性** | Langfuse |
| **LLM API代理** | LiteLLM |

### 4.3. 测试要求 (Testing Requirements)

* **前端:** 使用 `Vitest` 进行单元测试和组件测试。
* **后端:** 使用 `pytest` 框架进行单元测试和集成测试。
* **要求:** 核心业务逻辑和关键组件必须有相应的自动化测试覆盖。

## 5. 史诗 (Epics)

### 高阶史诗列表

* **史诗 1: 项目基础与核心工作流搭建 (Foundation & Core Workflow Setup)**
    * **目标:** 建立项目的代码仓库、服务骨架和基础设置，并实现一个最简化的、能跑通“写作-评估-修订”流程的自动化工作流。
* **史诗 2: “世界记忆”系统集成 (World Memory System Integration)**
    * **目标:** 实现核心的“世界记忆”功能，将Milvus和Neo4j数据库集成到工作流中，让智能体能够存储和查询小说的上下文信息。
* **史诗 3: 智能逻辑深化与人工监督闭环 (Intelligent Logic & Human-in-the-Loop Refinement)**
    * **目标:** 深度优化各智能体的核心逻辑和Prompt，并完善人工监督UI，实现一个完整、高效的“AI生成 + 人工反馈”的质量提升闭环。

### 史诗 1: 项目基础与核心工作流搭建 (详细分解)

* **故事 1.1: Monorepo项目与CI/CD管道初始化**
    * **作为一个** 开发者, **我想要** 一个配置正确的、包含基础CI/CD流程的pnpm monorepo代码库, **以便于** 后续所有的服务和应用都能在一个统一、一致的环境中进行高效开发。
    * **验收标准:** 1. pnpm workspace初始化。 2. `apps`和`packages`目录创建。 3. 根目录配置统一的ESLint和Prettier。 4. 创建基础的GitHub Actions工作流。
* **故事 1.2: 核心Agent服务与API骨架设置**
    * **作为一个** 后端开发者, **我想要** 为写作、评论家和修订三个核心Agent创建骨架级的FastAPI服务, **以便于** 它们可以被独立部署和接收网络请求。
    * **验收标准:** 1. 创建三个FastAPI应用骨架。 2. 每个服务有`/health`端点。 3. 每个服务都有Dockerfile。
* **故事 1.3: 基础UI壳层与核心页面导航**
    * **作为一个** 监督员, **我想要** 一个包含核心页面和导航功能的基础Web界面, **以便于** 我可以访问应用程序的不同功能区。
    * **验收标准:** 1. 创建React+Vite应用。 2. 创建占位符页面（仪表盘, 审查, 世界观）。 3. 设置React Router。 4. 集成shadcn/ui和Tailwind CSS构建基础布局。
* **故事 1.4: 本地开发基础设施搭建**
    * **作为一个** 开发者, **我想要** 通过一个命令就能启动所有必需的本地基础设施服务, **以便于** 我可以快速、轻松地搭建开发环境。
    * **验收标准:** 1. 创建`docker-compose.yml`。 2. 包含PostgreSQL, Milvus, Neo4j, Kafka, Redis, Minio服务。 3. 可通过`docker-compose up`一键启动。
* **故事 1.5: 基础Prefect工作流验证**
    * **作为一个** 系统, **我想要** 一个能按顺序调用三个核心Agent健康检查接口的简单Prefect工作流, **以便于** 验证整个端到端的服务通信和工作流编排链路是通畅的。
    * **验收标准:** 1. 创建Prefect flow。 2. 依次调用三个agent的`/health`端点。 3. 能正确处理成功/失败状态。 4. 可从Prefect UI手动触发并查看结果。

### 史诗 2: “世界记忆”系统集成 (详细分解)

* **故事 2.1: 世界观数据模型与API**
    * **作为一个** 后端开发者, **我想要** 在PostgreSQL中设计并实现用于存储“世界观”的核心数据表，并提供基础的CRUD API, **以便于** 结构化的核心概念可以被系统持久化存储和管理。
    * **验收标准:** 1. 定义Pydantic模型。 2. 创建数据库模型。 3. 通过迁移脚本创建表。 4. 创建CRUD API端点。
* **故事 2.2: 世界观管理界面**
    * **作为一个** 监督员, **我想要** 一个简单易用的Web界面来创建、查看、更新和删除“世界观”中的条目, **以便于** 我可以方便地管理故事的底层设定。
    * **验收标准:** 1. 实现“世界观”管理页面。 2. 包含创建/编辑表单。 3. 调用CRUD API。 4. 数据在列表中清晰展示。
* **故事 2.3: 语义记忆服务 (Milvus集成)**
    * **作为一个** 系统, **我想要** 一个服务，它能接收文本，将其转化为向量嵌入，并存入Milvus, **以便于** 后续可以根据语义相关性来检索过往事件。
    * **验收标准:** 1. 创建`memory-service`。 2. 集成文本嵌入模型。 3. 提供`/add-semantic-memory`端点。 4. 提供`/search-semantic-memory`端点。
* **故事 2.4: 关系记忆服务 (Neo4j集成)**
    * **作为一个** 系统, **我想要** 一个服务，它能在Neo4j中创建和查询节点与关系, **以便于** 我能理解故事中实体之间结构化的复杂关系。
    * **验收标准:** 1. `memory-service`支持Neo4j。 2. 提供`/update-relationship`端点。 3. 提供`/query-relationships`端点。
* **故事 2.5: 智能体与记忆系统集成**
    * **作为一个** 写作Agent, **我想要** 在撰写新章节前，先向“记忆服务”查询相关的上下文信息, **以便于** 我生成的内容能与之前的故事保持一致。
    * **验收标准:** 1. `WriterAgent`在写作前调用记忆查询接口。 2. 获取的上下文被整合进Prompt。 3. 写作完成后，新事件被更新到记忆库。

### 史诗 3: 智能逻辑深化与人工监督闭环 (详细分解)

* **故事 3.1: 高级智能体Prompt工程**
    * **作为一个** 系统, **我想要** 为核心智能体实现高级的、角色化的、多步骤的Prompt模板, **以便于** 它们能生成更细致、更高质量的内容。
    * **验收标准:** 1. Agent使用结构化Prompt。 2. `CriticAgent`能输出结构化的JSON评估数据。 3. `RewriterAgent`能理解该结构化反馈并执行修订。
* **故事 3.2: 实现完整的章节审查界面**
    * **作为一个** 监督员, **我想要** 一个交互式的、多面板的UI来方便地对比章节的初稿、评论家的反馈和修订稿, **以便于** 我可以高效地进行审查。
    * **验收标准:** 1. 实现三面板审查布局。 2. 正确获取并展示各版本内容及评估数据。
* **故事 3.3: 实现人工反馈与工作流控制**
    * **作为一个** 监督员, **我想要** 对审查的章节执行“批准”、“否决”或“请求再次修订”的操作, **以便于** 我能对故事的最终质量拥有完全的控制权。
    * **验收标准:** 1. 实现“批准/否决/再修订”按钮。 2. “批准”触发下一章节。 3. “否决”暂停流程。 4. “再修订”可附加评论并再次触发修订Agent。
* **故事 3.4: 实现成本与性能仪表盘**
    * **作为一个** 监督员, **我想要** 在仪表盘上看到关于Token消耗和API费用的实时统计数据, **以便于** 我能直观地了解系统的运营成本。
    * **验收标准:** 1. 实现仪表盘页面。 2. 展示累计Token、预估费用、平均成本、平均用时等指标。 3. 数据可视化。
* **故事 3.5: 实现最终文稿导出功能**
    * **作为一个** 监督员, **我想要** 一个能随时将所有已批准章节导出为单个完整文稿的功能, **以便于** 我可以从头到尾地阅读整个故事。
    * **验收标准:** 1. 实现“导出”按钮。 2. 后端能按序拼接所有已批准章节。 3. 提供`.txt`或`.md`格式的文件下载。
