---
description: 
globs: 
alwaysApply: true
---
# 测试驱动开发 (TDD) 规则

## 核心原则

1. **红灯-绿灯-重构循环**
   - 红灯：先写一个失败的测试
   - 绿灯：编写最少的代码使测试通过
   - 重构：优化代码但保持测试通过

2. **测试优先**
   - 永远不要在没有失败测试的情况下编写生产代码
   - 每个新功能都必须从编写测试开始

3. **小步前进**
   - 一次只编写一个测试
   - 一次只实现足够通过当前测试的代码
   - 频繁提交，保持代码可工作状态

## 开发流程

### 步骤 1：理解需求
- 分析用户需求，明确功能边界
- 识别输入、输出和边界条件
- 列出所有需要测试的场景

### 步骤 2：编写失败的测试
```javascript
// 示例：测试文件命名规范
// feature.test.js 或 feature.spec.js

describe('功能描述', () => {
  it('应该执行某个具体行为', () => {
    // Arrange: 准备测试数据
    // Act: 执行被测试的功能
    // Assert: 验证结果
  });
});
```

### 步骤 3：运行测试并确认失败
- 确保测试因正确的原因失败
- 如果测试意外通过，说明测试可能有问题

### 步骤 4：编写最简实现
- 只编写足够让测试通过的代码
- 不要过度设计或提前优化
- 遵循 YAGNI (You Aren't Gonna Need It) 原则

### 步骤 5：运行测试并确认通过
- 所有测试都应该通过
- 如果有测试失败，修复代码直到通过

### 步骤 6：重构
- 消除重复代码
- 改善命名
- 优化结构
- 确保所有测试仍然通过

## 测试编写规范

### 测试命名
- 使用描述性名称，清楚说明测试内容
- 格式：`should_期望行为_when_条件`
- 中文项目可使用：`应该_期望行为_当_条件`

### 测试结构
- 使用 AAA 模式：Arrange, Act, Assert
- 每个测试只验证一个行为
- 保持测试独立，不依赖其他测试

### 测试覆盖
- 正常路径（Happy Path）
- 边界条件
- 异常情况
- 错误处理

## 代码质量标准

### 测试质量
- 测试必须快速执行（< 100ms）
- 测试必须可重复，不依赖外部状态
- 测试必须清晰，容易理解
- 避免测试中的逻辑，保持简单

### 代码覆盖率
- 目标：80% 以上的代码覆盖率
- 关注分支覆盖，不仅仅是行覆盖
- 100% 覆盖率不是目标，有意义的测试才是

### 持续集成
- 每次提交前运行所有测试
- 保持主分支始终可部署
- 测试失败立即修复

## 常见测试模式

### 单元测试
```javascript
// 测试纯函数
test('add function', () => {
  expect(add(1, 2)).toBe(3);
  expect(add(-1, 1)).toBe(0);
  expect(add(0, 0)).toBe(0);
});
```

### 集成测试
```javascript
// 测试组件交互
test('user login flow', async () => {
  const user = { email: 'test@example.com', password: 'password' };
  const token = await login(user);
  expect(token).toBeDefined();
  expect(await verifyToken(token)).toBe(true);
});
```

### Mock 和 Stub
```javascript
// 隔离外部依赖
jest.mock('./api');
test('fetches user data', async () => {
  api.getUser.mockResolvedValue({ id: 1, name: 'Test User' });
  const user = await fetchUserData(1);
  expect(user.name).toBe('Test User');
});
```

## 重构指南

### 何时重构
- 测试全部通过后
- 发现重复代码时
- 代码难以理解时
- 添加新功能前

### 重构技巧
- 提取方法
- 内联变量
- 重命名
- 移动方法
- 提取接口

### 重构原则
- 小步重构，每步都运行测试
- 一次只做一种重构
- 如果测试失败，立即回滚

## 项目特定规则

### 文件组织
```
src/
  components/
    Button/
      Button.js
      Button.test.js
  utils/
    validation.js
    validation.test.js
```

### 测试工具栈
- 单元测试：Jest / Vitest
- 组件测试：React Testing Library
- E2E 测试：Cypress / Playwright
- 覆盖率：Jest Coverage / C8

### Git 提交规范
- 每个提交都应该包含测试和实现
- 提交信息格式：`feat: 添加用户登录功能 (包含测试)`
- 不允许提交失败的测试到主分支

## 交互指南

当用户请求新功能时：
1. 先询问功能的具体需求和验收标准
2. 列出需要编写的测试场景
3. 从第一个测试开始，遵循 TDD 循环
4. 展示每个步骤的代码变化
5. 解释为什么这样实现

当用户请求修复 bug 时：
1. 先编写一个能重现 bug 的测试
2. 确认测试失败
3. 修复代码使测试通过
4. 添加更多相关测试确保完整修复

## 注意事项

- 不要跳过测试直接写代码
- 不要一次写太多测试
- 不要测试框架或第三方库的功能
- 专注于测试业务逻辑和行为
- 保持测试的可维护性

记住：TDD 不仅是一种测试方法，更是一种设计方法。通过测试驱动，我们能得到更好的代码设计、更高的代码质量和更强的信心。