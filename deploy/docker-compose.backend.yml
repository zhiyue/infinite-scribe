# Backend Application Services
# This file contains all application services (API Gateway and Agents)
# while docker-compose.yml contains infrastructure services (databases, message queues, etc.)
#
# Usage:
#   docker-compose -f docker-compose.yml -f docker-compose.backend.yml up
#
# Note: All services use the unified Python environment from root pyproject.toml

version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: infinite-scribe-api-gateway
    environment:
      SERVICE_TYPE: api-gateway
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-infinite_scribe}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4j}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      # Other services
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-minioadmin}
      PREFECT_API_URL: "http://prefect-api:4200/api"
      # API settings
      API_HOST: 0.0.0.0
      API_PORT: 8000
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - infinite-scribe-network
    volumes:
      - ./apps/backend/src:/app/src:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Agent Services
  agent-worldsmith:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: infinite-scribe-agent-worldsmith
    environment:
      SERVICE_TYPE: agent-worldsmith
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-infinite_scribe}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      # Other services
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PREFECT_API_URL: "http://prefect-api:4200/api"
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - infinite-scribe-network

  agent-plotmaster:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: infinite-scribe-agent-plotmaster
    environment:
      SERVICE_TYPE: agent-plotmaster
      # Database connections
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB:-infinite_scribe}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
      # Other services
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      PREFECT_API_URL: "http://prefect-api:4200/api"
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - infinite-scribe-network

  # Add more agents as needed...
  # Example template for other agents:
  # agent-<name>:
  #   build:
  #     context: .
  #     dockerfile: apps/backend/Dockerfile
  #   container_name: infinite-scribe-agent-<name>
  #   environment:
  #     SERVICE_TYPE: agent-<name>
  #     # Database connections
  #     POSTGRES_HOST: postgres
  #     POSTGRES_PORT: 5432
  #     POSTGRES_DB: ${POSTGRES_DB:-infinite_scribe}
  #     POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  #     # ... other environment variables
  #   depends_on:
  #     - postgres
  #     - redis
  #     - kafka
  #   networks:
  #     - infinite-scribe-network

# Usage:
# Development: docker-compose -f docker-compose.yml -f docker-compose.backend.yml up
# Specific services: docker-compose -f docker-compose.yml -f docker-compose.backend.yml up api-gateway
# Background: docker-compose -f docker-compose.yml -f docker-compose.backend.yml up -d