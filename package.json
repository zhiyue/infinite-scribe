{
  "name": "infinite-scribe",
  "version": "0.0.1",
  "private": true,
  "description": "AI-powered novel writing platform using multi-agent collaboration",
  "author": "InfiniteScribe Team",
  "license": "UNLICENSED",
  "homepage": "https://github.com/zhiyue/infinite-scribe#readme",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zhiyue/infinite-scribe.git"
  },
  "bugs": {
    "url": "https://github.com/zhiyue/infinite-scribe/issues"
  },
  "engines": {
    "node": ">=20.0.0",
    "pnpm": "~8.15.0"
  },
  "packageManager": "pnpm@8.15.9",
  "scripts": {
    "// Backend Commands": "================================",
    "backend:install": "uv sync --all-extras",
    "backend:run": "cd apps/backend && uv run uvicorn src.api.main:app --reload --host 0.0.0.0 --port 8000",
    "backend:lint": "cd apps/backend && uv run ruff check src/",
    "backend:format": "cd apps/backend && uv run ruff format src/",
    "backend:typecheck": "uv run mypy apps/backend/src/ --ignore-missing-imports",
    "backend:test:unit": "cd apps/backend && uv run pytest tests/unit/ -v",
    "backend:api:simple": "./apps/backend/scripts/run-api-gateway-simple.sh",
    "backend:api:local": "./apps/backend/scripts/run-api-gateway-local.sh",
    "// API Testing Tools": "================================",
    "api:export": "./scripts/hoppscotch-integration.sh",
    "api:export:dev": "./scripts/hoppscotch-integration.sh --url http://192.168.2.201:8000",
    "api:hoppscotch": "./scripts/hoppscotch-integration.sh && echo 'Visit https://hoppscotch.io to import the generated files'",
    "backend:api:dev": "./apps/backend/scripts/run-api-gateway-dev.sh",
    "// Frontend Commands": "================================",
    "frontend:install": "cd apps/frontend && pnpm install",
    "frontend:run": "cd apps/frontend && pnpm dev",
    "frontend:build": "cd apps/frontend && pnpm build",
    "frontend:test": "cd apps/frontend && pnpm test",
    "// Testing Commands": "================================",
    "test:all": "TEST_MACHINE_IP=${TEST_MACHINE_IP:-192.168.2.202} ./scripts/testing/run-tests.sh --all --docker-host",
    "test:unit": "TEST_MACHINE_IP=${TEST_MACHINE_IP:-192.168.2.202} ./scripts/testing/run-tests.sh --unit --docker-host",
    "test:integration": "TEST_MACHINE_IP=${TEST_MACHINE_IP:-192.168.2.202} ./scripts/testing/run-tests.sh --integration --docker-host",
    "test:coverage": "TEST_MACHINE_IP=${TEST_MACHINE_IP:-192.168.2.202} ./scripts/testing/run-tests.sh --all --docker-host --coverage",
    "test:lint": "./scripts/testing/run-tests.sh --lint",
    "test:all:remote": "TEST_MACHINE_IP=${TEST_MACHINE_IP:-192.168.2.202} ./scripts/testing/run-tests.sh --all --remote",
    "// Development Shortcuts": "================================",
    "dev:all": "echo 'Please run backend:run and frontend:run in separate terminals'",
    "lint:all": "pnpm run backend:lint && pnpm run test:lint",
    "format:all": "pnpm run backend:format && pnpm run format",
    "typecheck:all": "pnpm run backend:typecheck",
    "check": "pnpm run lint:all && pnpm run typecheck:all && pnpm run backend:test:unit",
    "// SSH Access": "================================",
    "ssh:dev": "ssh ${SSH_USER:-zhiyue}@192.168.2.201",
    "ssh:test": "ssh ${SSH_USER:-zhiyue}@${TEST_MACHINE_IP:-192.168.2.202}",
    "// Environment Management": "================================",
    "env:consolidate": "./scripts/consolidate-env-files.sh",
    "env:local": "./scripts/switch-env.sh local",
    "env:dev": "./scripts/switch-env.sh dev",
    "env:test": "./scripts/switch-env.sh test",
    "env:show": "[ -L .env ] && echo \"Current: .env -> $(readlink .env)\" || echo \"No .env symlink found\"",
    "env:sync-frontend": "./scripts/sync-frontend-env.sh",
    "// Original Scripts": "================================",
    "dev": "echo 'Run development scripts in individual apps'",
    "build": "pnpm -r build",
    "test": "pnpm -r test",
    "test:structure": "node scripts/testing/test-project-structure.js",
    "lint": "pnpm -r lint",
    "format": "prettier --write .",
    "clean": "pnpm -r clean && find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true && find . -type d -name '.pytest_cache' -exec rm -rf {} + 2>/dev/null || true && find . -type d -name '.mypy_cache' -exec rm -rf {} + 2>/dev/null || true && find . -type d -name '.ruff_cache' -exec rm -rf {} + 2>/dev/null || true && find . -type d -name '.next' -exec rm -rf {} + 2>/dev/null || true && find . -type d -name 'node_modules/.cache' -exec rm -rf {} + 2>/dev/null || true",
    "prepare": "husky install",
    "check:services": "node scripts/monitoring/check-services-simple.js",
    "check:services:full": "node scripts/monitoring/check-services.js",
    "infra:deploy": "./scripts/deployment/deploy-infrastructure.sh",
    "infra:deploy:local": "./scripts/deployment/deploy-infrastructure.sh --local",
    "infra:deploy:clean": "./scripts/deployment/deploy-infrastructure.sh --clean",
    "infra:deploy:local:clean": "./scripts/deployment/deploy-infrastructure.sh --local --clean",
    "infra:deploy:dev": "./scripts/deployment/deploy-infrastructure.sh --profile development",
    "infra:deploy:local:dev": "./scripts/deployment/deploy-infrastructure.sh --local --profile development",
    "infra:up": "docker compose --env-file .env.infrastructure up -d",
    "infra:down": "docker compose --env-file .env.infrastructure down",
    "infra:logs": "docker compose --env-file .env.infrastructure logs -f",
    "deploy:dev": "./scripts/deployment/deploy-to-dev.sh",
    "deploy:dev:build": "./scripts/deployment/deploy-to-dev.sh --build",
    "deploy:dev:infra": "./scripts/deployment/deploy-to-dev.sh --type infra",
    "deploy:dev:backend": "./scripts/deployment/deploy-to-dev.sh --type backend",
    "deploy:dev:backend:build": "./scripts/deployment/deploy-to-dev.sh --type backend --build",
    "deploy:dev:agents": "./scripts/deployment/deploy-to-dev.sh --type agents",
    "deploy:dev:agents:build": "./scripts/deployment/deploy-to-dev.sh --type agents --build",
    "deploy:dev:api": "./scripts/deployment/deploy-to-dev.sh --service api-gateway",
    "deploy:dev:api:build": "./scripts/deployment/deploy-to-dev.sh --service api-gateway --build",
    "deploy:dev:help": "./scripts/deployment/deploy-to-dev.sh --help",
    "logs:remote": "./scripts/monitoring/remote-logs.sh",
    "backup:dev": "./scripts/monitoring/backup-dev-data.sh"
  },
  "devDependencies": {
    "@aws-sdk/client-s3": "^3.839.0",
    "@types/node": "^20.11.0",
    "@zilliz/milvus2-sdk-node": "^2.5.10",
    "dotenv": "^17.0.0",
    "husky": "^8.0.3",
    "kafkajs": "^2.2.4",
    "lint-staged": "^15.2.0",
    "neo4j-driver": "^5.28.1",
    "pg": "^8.16.3",
    "prettier": "^3.2.5",
    "redis": "^5.5.6",
    "typescript": "~5.2.2"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx,json,css,md}": [
      "prettier --write"
    ],
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix"
    ]
  }
}
