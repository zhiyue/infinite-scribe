[project]
name = "infinite-scribe"
version = "0.1.0"
description = "Infinite Scribe - AI-powered collaborative novel creation platform"
requires-python = ">=3.11"

dependencies = [
    # Core Web Framework
    "fastapi~=0.115.13",
    "pydantic~=2.11.7",
    "pydantic-settings~=2.6.0",
    "uvicorn[standard]~=0.32.0",
    
    # Databases
    "asyncpg~=0.30.0",
    "neo4j~=5.26.0", 
    "redis~=5.2.0",
    "pymilvus~=2.4.9",
    
    # AI/ML Providers
    "openai~=1.54.0",
    "anthropic~=0.39.0",
    "litellm~=1.52.0",
    "langfuse~=2.57.0",
    
    # Infrastructure
    "aiokafka~=0.11.0",
    "prefect~=2.19.0",
    "minio~=7.2.10",
    
    # Utilities
    "python-dotenv~=1.0.1",
    "structlog~=24.4.0",
    "httpx~=0.27.0",
    "tenacity~=9.0.0",
    "pyyaml~=6.0.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest~=8.3.3",
    "pytest-asyncio~=0.24.0",
    "pytest-cov~=6.0.0",
    "pytest-mock~=3.14.0",
    "testcontainers~=4.8.0",
    
    # Code Quality
    "ruff~=0.7.2",
    "black~=24.10.0",
    "mypy~=1.13.0",
    "types-pyyaml~=6.0.12.20240917",
    "types-redis~=4.6.0.20241230",
    
    # Development Tools
    "ipdb~=0.13.13",
    "rich~=13.9.2",
    "watchdog~=6.0.0",
    "pre-commit~=4.0.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".venv",
    "build",
    "dist",
    "apps/*/tests/fixtures",
    ".git",
    "__pycache__",
    "*.egg-info",
]
src = ["apps", "packages"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "RUF012", # mutable class attributes should be annotated with ClassVar
]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | apps/.*/migrations
  | __pycache__
)/
'''

# Pytest configuration
[tool.pytest.ini_options]
pythonpath = [
    ".",
    "apps/api-gateway",
    "apps/worldsmith-agent",
    "apps/plotmaster-agent",
    "apps/outliner-agent",
    "apps/director-agent",
    "apps/characterexpert-agent",
    "apps/worldbuilder-agent",
    "apps/writer-agent",
    "apps/critic-agent",
    "apps/factchecker-agent",
    "apps/rewriter-agent",
    "packages/shared-types/src",
]
testpaths = ["tests", "apps/*/tests"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
]

# Mypy configuration
[tool.mypy]
python_version = "3.11"
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = false
disallow_any_generics = false

# Coverage configuration
[tool.coverage.run]
source = ["apps", "packages"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/.venv/*",
    "*/conftest.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"