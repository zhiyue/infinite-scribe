"""add_column_comments_to_all_tables

Revision ID: cdbb7c721fea
Revises: 3b8fe0c17290
Create Date: 2025-07-09 17:48:06.733548

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cdbb7c721fea'
down_revision: Union[str, Sequence[str], None] = '3b8fe0c17290'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('async_tasks', 'id',
               existing_type=sa.UUID(),
               comment='任务唯一标识符',
               existing_nullable=False)
    op.alter_column('async_tasks', 'task_type',
               existing_type=sa.TEXT(),
               comment='任务类型，如"GenerateChapter"、"AnalyzeWorldview"',
               existing_nullable=False)
    op.alter_column('async_tasks', 'triggered_by_command_id',
               existing_type=sa.UUID(),
               comment='触发此任务的命令ID，外键关联command_inbox表',
               existing_nullable=True)
    op.alter_column('async_tasks', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'),
               comment='任务状态，使用task_status枚举',
               existing_nullable=False)
    op.alter_column('async_tasks', 'progress',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment='任务进度百分比，0.00-100.00',
               existing_nullable=False)
    op.alter_column('async_tasks', 'input_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='任务输入数据，JSON格式',
               existing_nullable=True)
    op.alter_column('async_tasks', 'result_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='任务执行结果，完成时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'error_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='错误信息详情，失败时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'execution_node',
               existing_type=sa.TEXT(),
               comment='执行任务的节点标识，用于分布式任务调度',
               existing_nullable=True)
    op.alter_column('async_tasks', 'retry_count',
               existing_type=sa.INTEGER(),
               comment='当前重试次数',
               existing_nullable=False)
    op.alter_column('async_tasks', 'max_retries',
               existing_type=sa.INTEGER(),
               comment='最大重试次数，默认3次',
               existing_nullable=False)
    op.alter_column('async_tasks', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='任务开始执行时间，状态为RUNNING时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='任务完成时间，状态为COMPLETED或FAILED时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='任务创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('async_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapter_versions', 'id',
               existing_type=sa.UUID(),
               comment='章节版本的唯一标识符',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'chapter_id',
               existing_type=sa.UUID(),
               comment='关联的章节ID，外键关联chapters表',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'version_number',
               existing_type=sa.INTEGER(),
               comment='版本号，从1开始递增，同一章节内唯一',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'content_url',
               existing_type=sa.TEXT(),
               comment='指向MinIO中该版本内容的URL',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'word_count',
               existing_type=sa.INTEGER(),
               comment='该版本的字数统计',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'created_by_agent_type',
               existing_type=postgresql.ENUM('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'),
               comment='创建此版本的AI智能体类型',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'change_reason',
               existing_type=sa.TEXT(),
               comment='修改原因说明，如"根据评论家意见修改"',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'parent_version_id',
               existing_type=sa.UUID(),
               comment='指向上一个版本的ID，形成版本链',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='存储与此版本相关的额外元数据，JSONB格式',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='版本创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapters', 'id',
               existing_type=sa.UUID(),
               comment='章节唯一标识符，自动生成的UUID',
               existing_nullable=False)
    op.alter_column('chapters', 'novel_id',
               existing_type=sa.UUID(),
               comment='所属小说ID，外键关联novels表，级联删除',
               existing_nullable=False)
    op.alter_column('chapters', 'chapter_number',
               existing_type=sa.INTEGER(),
               comment='章节序号，从1开始递增，同一小说内唯一',
               existing_nullable=False)
    op.alter_column('chapters', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment='章节标题，可选字段',
               existing_nullable=True)
    op.alter_column('chapters', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'REVIEWING', 'REVISING', 'PUBLISHED', name='chapterstatus'),
               comment='章节当前状态，使用chapter_status枚举',
               existing_nullable=False)
    op.alter_column('chapters', 'published_version_id',
               existing_type=sa.UUID(),
               comment='指向当前已发布版本的ID，外键将在chapter_versions表创建后添加',
               existing_nullable=True)
    op.alter_column('chapters', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('chapters', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='章节创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapters', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='章节最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('characters', 'id',
               existing_type=sa.UUID(),
               comment='角色唯一标识符，对应Neo4j中的app_id',
               existing_nullable=False)
    op.alter_column('characters', 'novel_id',
               existing_type=sa.UUID(),
               comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('characters', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment='角色姓名，必填',
               existing_nullable=False)
    op.alter_column('characters', 'role',
               existing_type=sa.VARCHAR(length=50),
               comment='角色定位，如"主角"、"反派"、"配角"等',
               existing_nullable=True)
    op.alter_column('characters', 'description',
               existing_type=sa.TEXT(),
               comment='角色外观、特征等描述信息',
               existing_nullable=True)
    op.alter_column('characters', 'background_story',
               existing_type=sa.TEXT(),
               comment='角色背景故事，包括身世、经历等',
               existing_nullable=True)
    op.alter_column('characters', 'personality_traits',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='性格特征数组，如["勇敢", "正直", "幽默"]',
               existing_nullable=True)
    op.alter_column('characters', 'goals',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='角色目标数组，如["寻找失散的妹妹", "成为最强剑士"]',
               existing_nullable=True)
    op.alter_column('characters', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('characters', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='角色创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('characters', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='角色信息最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('command_inbox', 'id',
               existing_type=sa.UUID(),
               comment='命令唯一标识符',
               existing_nullable=False)
    op.alter_column('command_inbox', 'session_id',
               existing_type=sa.UUID(),
               comment='会话ID，关联到genesis_sessions或其他业务会话',
               existing_nullable=False)
    op.alter_column('command_inbox', 'command_type',
               existing_type=sa.TEXT(),
               comment='命令类型，如"ConfirmStoryConception"、"GenerateWorldview"',
               existing_nullable=False)
    op.alter_column('command_inbox', 'idempotency_key',
               existing_type=sa.TEXT(),
               comment='幂等键，确保同一命令不会被重复处理',
               existing_nullable=False)
    op.alter_column('command_inbox', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='命令载荷，包含命令执行所需的所有数据',
               existing_nullable=True)
    op.alter_column('command_inbox', 'status',
               existing_type=postgresql.ENUM('RECEIVED', 'PROCESSING', 'COMPLETED', 'FAILED', name='commandstatus'),
               comment='命令状态，使用command_status枚举',
               existing_nullable=False)
    op.alter_column('command_inbox', 'error_message',
               existing_type=sa.TEXT(),
               comment='错误信息，当状态为FAILED时必填',
               existing_nullable=True)
    op.alter_column('command_inbox', 'retry_count',
               existing_type=sa.INTEGER(),
               comment='重试次数，用于失败重试机制',
               existing_nullable=False)
    op.alter_column('command_inbox', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='命令接收时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('command_inbox', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('concept_templates', 'id',
               existing_type=sa.UUID(),
               comment='立意模板的唯一标识符',
               existing_nullable=False)
    op.alter_column('concept_templates', 'core_idea',
               existing_type=sa.VARCHAR(length=200),
               comment='核心抽象思想，如"知识与无知的深刻对立"',
               existing_nullable=False)
    op.alter_column('concept_templates', 'description',
               existing_type=sa.VARCHAR(length=800),
               comment='立意的深层含义阐述，不超过800字符',
               existing_nullable=False)
    op.alter_column('concept_templates', 'philosophical_depth',
               existing_type=sa.VARCHAR(length=1000),
               comment='哲学思辨的深度表达，探讨存在、认知、道德等层面',
               existing_nullable=False)
    op.alter_column('concept_templates', 'emotional_core',
               existing_type=sa.VARCHAR(length=500),
               comment='情感核心与内在冲突，描述人物可能面临的情感挑战',
               existing_nullable=False)
    op.alter_column('concept_templates', 'philosophical_category',
               existing_type=sa.VARCHAR(length=100),
               comment='哲学类别，如"存在主义"、"人道主义"、"理想主义"',
               existing_nullable=True)
    op.alter_column('concept_templates', 'thematic_tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='主题标签，如["成长","选择","牺牲","真理"]，JSON数组格式',
               existing_nullable=False)
    op.alter_column('concept_templates', 'complexity_level',
               existing_type=sa.VARCHAR(length=20),
               comment='思辨复杂度：simple, medium, complex',
               existing_nullable=False)
    op.alter_column('concept_templates', 'universal_appeal',
               existing_type=sa.BOOLEAN(),
               comment='是否具有普遍意义，跨文化的普适性',
               existing_nullable=False)
    op.alter_column('concept_templates', 'cultural_specificity',
               existing_type=sa.VARCHAR(length=100),
               comment='文化特异性，如"东方哲学"、"西方哲学"、"普世价值"',
               existing_nullable=True)
    op.alter_column('concept_templates', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment='是否启用，用于管理可用的立意模板',
               existing_nullable=False)
    op.alter_column('concept_templates', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment='创建者，如"system"、"admin"或具体用户',
               existing_nullable=True,
               existing_server_default=sa.text("'system'::character varying"))
    op.alter_column('concept_templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('concept_templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('domain_events', 'id',
               existing_type=sa.BIGINT(),
               comment='自增主键，用于保证事件顺序',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('domain_events', 'event_id',
               existing_type=sa.UUID(),
               comment='事件唯一标识符',
               existing_nullable=False)
    op.alter_column('domain_events', 'correlation_id',
               existing_type=sa.UUID(),
               comment='关联ID，用于追踪同一业务流程中的相关事件',
               existing_nullable=True)
    op.alter_column('domain_events', 'causation_id',
               existing_type=sa.UUID(),
               comment='因果链ID，表示引发此事件的上级事件',
               existing_nullable=True)
    op.alter_column('domain_events', 'event_type',
               existing_type=sa.TEXT(),
               comment='事件类型，如"ChapterCreated"、"ReviewCompleted"',
               existing_nullable=False)
    op.alter_column('domain_events', 'event_version',
               existing_type=sa.INTEGER(),
               comment='事件版本号，用于事件模式演化',
               existing_nullable=False)
    op.alter_column('domain_events', 'aggregate_type',
               existing_type=sa.TEXT(),
               comment='聚合根类型，如"Novel"、"Chapter"',
               existing_nullable=False)
    op.alter_column('domain_events', 'aggregate_id',
               existing_type=sa.TEXT(),
               comment='聚合根ID，标识具体的业务实体',
               existing_nullable=False)
    op.alter_column('domain_events', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='事件数据载荷，包含事件的详细内容',
               existing_nullable=True)
    op.alter_column('domain_events', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='事件元数据，如用户ID、时间戳、来源等',
               existing_nullable=True)
    op.alter_column('domain_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='事件创建时间，不可修改',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('event_outbox', 'id',
               existing_type=sa.UUID(),
               comment='消息唯一标识符',
               existing_nullable=False)
    op.alter_column('event_outbox', 'topic',
               existing_type=sa.TEXT(),
               comment='消息主题/队列名称，如"novel.events"、"chapter.updates"',
               existing_nullable=False)
    op.alter_column('event_outbox', 'key',
               existing_type=sa.TEXT(),
               comment='消息键，用于消息分区和顺序保证',
               existing_nullable=True)
    op.alter_column('event_outbox', 'partition_key',
               existing_type=sa.TEXT(),
               comment='分区键，用于Kafka等消息系统的分区路由',
               existing_nullable=True)
    op.alter_column('event_outbox', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='消息载荷，包含事件的完整数据',
               existing_nullable=False)
    op.alter_column('event_outbox', 'headers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='消息头，包含元数据如事件类型、版本、追踪ID等',
               existing_nullable=True)
    op.alter_column('event_outbox', 'status',
               existing_type=postgresql.ENUM('PENDING', 'SENT', name='outboxstatus'),
               comment='消息状态，使用outbox_status枚举',
               existing_nullable=False)
    op.alter_column('event_outbox', 'retry_count',
               existing_type=sa.INTEGER(),
               comment='当前重试次数',
               existing_nullable=False)
    op.alter_column('event_outbox', 'max_retries',
               existing_type=sa.INTEGER(),
               comment='最大重试次数，默认5次',
               existing_nullable=False)
    op.alter_column('event_outbox', 'last_error',
               existing_type=sa.TEXT(),
               comment='最后一次发送失败的错误信息',
               existing_nullable=True)
    op.alter_column('event_outbox', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='计划发送时间，用于延迟消息',
               existing_nullable=True)
    op.alter_column('event_outbox', 'sent_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='实际发送成功时间，状态为SENT时必填',
               existing_nullable=True)
    op.alter_column('event_outbox', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='消息创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('flow_resume_handles', 'id',
               existing_type=sa.UUID(),
               comment='句柄唯一标识符',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'correlation_id',
               existing_type=sa.TEXT(),
               comment='关联ID，唯一标识一个可恢复的工作流实例',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'flow_run_id',
               existing_type=sa.TEXT(),
               comment='工作流运行ID，关联到具体的工作流执行实例',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'task_name',
               existing_type=sa.TEXT(),
               comment='暂停的任务名称，如"WaitForUserConfirmation"',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'resume_handle',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='恢复句柄数据，包含恢复工作流所需的状态信息',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'status',
               existing_type=postgresql.ENUM('PENDING_PAUSE', 'PAUSED', 'RESUMED', 'EXPIRED', name='handlestatus'),
               comment='句柄状态，使用handle_status枚举',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'resume_payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='恢复时的载荷数据，包含用户输入或外部事件数据',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'timeout_seconds',
               existing_type=sa.INTEGER(),
               comment='超时时间（秒），超时后工作流将自动恢复或失败',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'context_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='上下文数据，存储工作流暂停时的业务上下文',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='句柄过期时间，过期后不能再恢复',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'resumed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='实际恢复时间，状态为RESUMED时必填',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='句柄创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('flow_resume_handles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genesis_sessions', 'id',
               existing_type=sa.UUID(),
               comment='创世会话的唯一标识符',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'novel_id',
               existing_type=sa.UUID(),
               comment='流程完成后关联的小说ID，允许为空（流程未完成时）',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'user_id',
               existing_type=sa.UUID(),
               comment='发起创世流程的用户ID，用于权限控制和用户关联',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'status',
               existing_type=postgresql.ENUM('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='genesisstatus'),
               comment='整个创世会话的状态，使用genesis_status枚举',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'current_stage',
               existing_type=postgresql.ENUM('CONCEPT_SELECTION', 'STORY_CONCEPTION', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesisstage'),
               comment='当前所处的业务阶段，使用genesis_stage枚举',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'confirmed_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='存储每个阶段已确认的最终数据，JSONB格式，包含各阶段的输出结果',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创世会话创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genesis_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创世会话最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('novels', 'id',
               existing_type=sa.UUID(),
               comment='小说唯一标识符，自动生成的UUID',
               existing_nullable=False)
    op.alter_column('novels', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment='小说标题，必填，最长255个字符',
               existing_nullable=False)
    op.alter_column('novels', 'theme',
               existing_type=sa.TEXT(),
               comment='小说主题描述，如"科幻冒险"、"都市言情"等',
               existing_nullable=True)
    op.alter_column('novels', 'writing_style',
               existing_type=sa.TEXT(),
               comment='写作风格描述，如"幽默诙谐"、"严肃写实"等',
               existing_nullable=True)
    op.alter_column('novels', 'status',
               existing_type=postgresql.ENUM('GENESIS', 'GENERATING', 'PAUSED', 'COMPLETED', 'FAILED', name='novelstatus'),
               comment='小说生成状态，使用novel_status枚举',
               existing_nullable=False)
    op.alter_column('novels', 'target_chapters',
               existing_type=sa.INTEGER(),
               comment='目标章节数，用户设定的计划章节总数',
               existing_nullable=False)
    op.alter_column('novels', 'completed_chapters',
               existing_type=sa.INTEGER(),
               comment='已完成章节数，系统自动统计',
               existing_nullable=False)
    op.alter_column('novels', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('novels', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='创建时间，带时区的时间戳',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('novels', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='最后更新时间，通过触发器自动维护',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'id',
               existing_type=sa.UUID(),
               comment='评审记录唯一标识符',
               existing_nullable=False)
    op.alter_column('reviews', 'chapter_id',
               existing_type=sa.UUID(),
               comment='被评审的章节ID，外键关联chapters表',
               existing_nullable=False)
    op.alter_column('reviews', 'chapter_version_id',
               existing_type=sa.UUID(),
               comment='评审针对的具体章节版本ID，外键关联chapter_versions表',
               existing_nullable=False)
    op.alter_column('reviews', 'agent_type',
               existing_type=postgresql.ENUM('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'),
               comment='执行评审的AI智能体类型',
               existing_nullable=False)
    op.alter_column('reviews', 'review_type',
               existing_type=sa.VARCHAR(length=50),
               comment='评审类型，如CRITIC(评论家审查)、FACT_CHECK(事实核查)',
               existing_nullable=False)
    op.alter_column('reviews', 'score',
               existing_type=sa.NUMERIC(precision=3, scale=1),
               comment='评分，范围0.0-10.0，保留一位小数',
               existing_nullable=True)
    op.alter_column('reviews', 'comment',
               existing_type=sa.TEXT(),
               comment='评审意见和建议的详细文本',
               existing_nullable=True)
    op.alter_column('reviews', 'is_consistent',
               existing_type=sa.BOOLEAN(),
               comment='是否与小说设定一致，用于事实核查',
               existing_nullable=True)
    op.alter_column('reviews', 'issues_found',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='发现的问题列表，如["时间线冲突", "角色性格不一致"]',
               existing_nullable=True)
    op.alter_column('reviews', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='评审创建时间，不会更新',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('story_arcs', 'id',
               existing_type=sa.UUID(),
               comment='故事弧唯一标识符',
               existing_nullable=False)
    op.alter_column('story_arcs', 'novel_id',
               existing_type=sa.UUID(),
               comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('story_arcs', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment='故事弧标题，如"主角觉醒篇"、"魔王讨伐篇"',
               existing_nullable=False)
    op.alter_column('story_arcs', 'summary',
               existing_type=sa.TEXT(),
               comment='故事弧概要，描述这条线索的主要内容和发展',
               existing_nullable=True)
    op.alter_column('story_arcs', 'start_chapter_number',
               existing_type=sa.INTEGER(),
               comment='故事弧开始的章节号',
               existing_nullable=True)
    op.alter_column('story_arcs', 'end_chapter_number',
               existing_type=sa.INTEGER(),
               comment='故事弧结束的章节号',
               existing_nullable=True)
    op.alter_column('story_arcs', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment='故事弧状态，如PLANNED(已规划)、ACTIVE(进行中)、COMPLETED(已完成)',
               existing_nullable=True)
    op.alter_column('story_arcs', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('story_arcs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='故事弧创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('story_arcs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='故事弧最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('worldview_entries', 'id',
               existing_type=sa.UUID(),
               comment='条目唯一标识符，与Neo4j图数据库中节点的app_id属性对应',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'novel_id',
               existing_type=sa.UUID(),
               comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'entry_type',
               existing_type=postgresql.ENUM('LOCATION', 'ORGANIZATION', 'TECHNOLOGY', 'LAW', 'CONCEPT', 'EVENT', 'ITEM', 'CULTURE', 'SPECIES', 'OTHER', name='worldviewentrytype'),
               comment='条目类型，使用worldview_entry_type枚举',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment='条目名称，如"魔法学院"、"时空传送门"等，同一小说内按类型唯一',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'description',
               existing_type=sa.TEXT(),
               comment='条目详细描述，包含其特征、作用、历史等信息',
               existing_nullable=True)
    op.alter_column('worldview_entries', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment='标签数组，用于分类和快速检索，如["魔法", "禁地", "古代遗迹"]',
               existing_nullable=True)
    op.alter_column('worldview_entries', 'version',
               existing_type=sa.INTEGER(),
               comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='条目创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('worldview_entries', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='条目最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('worldview_entries', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='条目最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('worldview_entries', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='条目创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('worldview_entries', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'tags',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='标签数组，用于分类和快速检索，如["魔法", "禁地", "古代遗迹"]',
               existing_nullable=True)
    op.alter_column('worldview_entries', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='条目详细描述，包含其特征、作用、历史等信息',
               existing_nullable=True)
    op.alter_column('worldview_entries', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='条目名称，如"魔法学院"、"时空传送门"等，同一小说内按类型唯一',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'entry_type',
               existing_type=postgresql.ENUM('LOCATION', 'ORGANIZATION', 'TECHNOLOGY', 'LAW', 'CONCEPT', 'EVENT', 'ITEM', 'CULTURE', 'SPECIES', 'OTHER', name='worldviewentrytype'),
               comment=None,
               existing_comment='条目类型，使用worldview_entry_type枚举',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'novel_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('worldview_entries', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='条目唯一标识符，与Neo4j图数据库中节点的app_id属性对应',
               existing_nullable=False)
    op.alter_column('story_arcs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='故事弧最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('story_arcs', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='故事弧创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('story_arcs', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('story_arcs', 'status',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='故事弧状态，如PLANNED(已规划)、ACTIVE(进行中)、COMPLETED(已完成)',
               existing_nullable=True)
    op.alter_column('story_arcs', 'end_chapter_number',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='故事弧结束的章节号',
               existing_nullable=True)
    op.alter_column('story_arcs', 'start_chapter_number',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='故事弧开始的章节号',
               existing_nullable=True)
    op.alter_column('story_arcs', 'summary',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='故事弧概要，描述这条线索的主要内容和发展',
               existing_nullable=True)
    op.alter_column('story_arcs', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='故事弧标题，如"主角觉醒篇"、"魔王讨伐篇"',
               existing_nullable=False)
    op.alter_column('story_arcs', 'novel_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('story_arcs', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='故事弧唯一标识符',
               existing_nullable=False)
    op.alter_column('reviews', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='评审创建时间，不会更新',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('reviews', 'issues_found',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='发现的问题列表，如["时间线冲突", "角色性格不一致"]',
               existing_nullable=True)
    op.alter_column('reviews', 'is_consistent',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否与小说设定一致，用于事实核查',
               existing_nullable=True)
    op.alter_column('reviews', 'comment',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='评审意见和建议的详细文本',
               existing_nullable=True)
    op.alter_column('reviews', 'score',
               existing_type=sa.NUMERIC(precision=3, scale=1),
               comment=None,
               existing_comment='评分，范围0.0-10.0，保留一位小数',
               existing_nullable=True)
    op.alter_column('reviews', 'review_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='评审类型，如CRITIC(评论家审查)、FACT_CHECK(事实核查)',
               existing_nullable=False)
    op.alter_column('reviews', 'agent_type',
               existing_type=postgresql.ENUM('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'),
               comment=None,
               existing_comment='执行评审的AI智能体类型',
               existing_nullable=False)
    op.alter_column('reviews', 'chapter_version_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='评审针对的具体章节版本ID，外键关联chapter_versions表',
               existing_nullable=False)
    op.alter_column('reviews', 'chapter_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='被评审的章节ID，外键关联chapters表',
               existing_nullable=False)
    op.alter_column('reviews', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='评审记录唯一标识符',
               existing_nullable=False)
    op.alter_column('novels', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='最后更新时间，通过触发器自动维护',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('novels', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间，带时区的时间戳',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('novels', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('novels', 'completed_chapters',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='已完成章节数，系统自动统计',
               existing_nullable=False)
    op.alter_column('novels', 'target_chapters',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='目标章节数，用户设定的计划章节总数',
               existing_nullable=False)
    op.alter_column('novels', 'status',
               existing_type=postgresql.ENUM('GENESIS', 'GENERATING', 'PAUSED', 'COMPLETED', 'FAILED', name='novelstatus'),
               comment=None,
               existing_comment='小说生成状态，使用novel_status枚举',
               existing_nullable=False)
    op.alter_column('novels', 'writing_style',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='写作风格描述，如"幽默诙谐"、"严肃写实"等',
               existing_nullable=True)
    op.alter_column('novels', 'theme',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='小说主题描述，如"科幻冒险"、"都市言情"等',
               existing_nullable=True)
    op.alter_column('novels', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='小说标题，必填，最长255个字符',
               existing_nullable=False)
    op.alter_column('novels', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='小说唯一标识符，自动生成的UUID',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创世会话最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genesis_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创世会话创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('genesis_sessions', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'confirmed_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='存储每个阶段已确认的最终数据，JSONB格式，包含各阶段的输出结果',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'current_stage',
               existing_type=postgresql.ENUM('CONCEPT_SELECTION', 'STORY_CONCEPTION', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesisstage'),
               comment=None,
               existing_comment='当前所处的业务阶段，使用genesis_stage枚举',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'status',
               existing_type=postgresql.ENUM('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='genesisstatus'),
               comment=None,
               existing_comment='整个创世会话的状态，使用genesis_status枚举',
               existing_nullable=False)
    op.alter_column('genesis_sessions', 'user_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='发起创世流程的用户ID，用于权限控制和用户关联',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'novel_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='流程完成后关联的小说ID，允许为空（流程未完成时）',
               existing_nullable=True)
    op.alter_column('genesis_sessions', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='创世会话的唯一标识符',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('flow_resume_handles', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='句柄创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('flow_resume_handles', 'resumed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='实际恢复时间，状态为RESUMED时必填',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='句柄过期时间，过期后不能再恢复',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'context_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='上下文数据，存储工作流暂停时的业务上下文',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'timeout_seconds',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='超时时间（秒），超时后工作流将自动恢复或失败',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'resume_payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='恢复时的载荷数据，包含用户输入或外部事件数据',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'status',
               existing_type=postgresql.ENUM('PENDING_PAUSE', 'PAUSED', 'RESUMED', 'EXPIRED', name='handlestatus'),
               comment=None,
               existing_comment='句柄状态，使用handle_status枚举',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'resume_handle',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='恢复句柄数据，包含恢复工作流所需的状态信息',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'task_name',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='暂停的任务名称，如"WaitForUserConfirmation"',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'flow_run_id',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='工作流运行ID，关联到具体的工作流执行实例',
               existing_nullable=True)
    op.alter_column('flow_resume_handles', 'correlation_id',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='关联ID，唯一标识一个可恢复的工作流实例',
               existing_nullable=False)
    op.alter_column('flow_resume_handles', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='句柄唯一标识符',
               existing_nullable=False)
    op.alter_column('event_outbox', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='消息创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('event_outbox', 'sent_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='实际发送成功时间，状态为SENT时必填',
               existing_nullable=True)
    op.alter_column('event_outbox', 'scheduled_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='计划发送时间，用于延迟消息',
               existing_nullable=True)
    op.alter_column('event_outbox', 'last_error',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='最后一次发送失败的错误信息',
               existing_nullable=True)
    op.alter_column('event_outbox', 'max_retries',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='最大重试次数，默认5次',
               existing_nullable=False)
    op.alter_column('event_outbox', 'retry_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='当前重试次数',
               existing_nullable=False)
    op.alter_column('event_outbox', 'status',
               existing_type=postgresql.ENUM('PENDING', 'SENT', name='outboxstatus'),
               comment=None,
               existing_comment='消息状态，使用outbox_status枚举',
               existing_nullable=False)
    op.alter_column('event_outbox', 'headers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='消息头，包含元数据如事件类型、版本、追踪ID等',
               existing_nullable=True)
    op.alter_column('event_outbox', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='消息载荷，包含事件的完整数据',
               existing_nullable=False)
    op.alter_column('event_outbox', 'partition_key',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='分区键，用于Kafka等消息系统的分区路由',
               existing_nullable=True)
    op.alter_column('event_outbox', 'key',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='消息键，用于消息分区和顺序保证',
               existing_nullable=True)
    op.alter_column('event_outbox', 'topic',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='消息主题/队列名称，如"novel.events"、"chapter.updates"',
               existing_nullable=False)
    op.alter_column('event_outbox', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='消息唯一标识符',
               existing_nullable=False)
    op.alter_column('domain_events', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='事件创建时间，不可修改',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('domain_events', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='事件元数据，如用户ID、时间戳、来源等',
               existing_nullable=True)
    op.alter_column('domain_events', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='事件数据载荷，包含事件的详细内容',
               existing_nullable=True)
    op.alter_column('domain_events', 'aggregate_id',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='聚合根ID，标识具体的业务实体',
               existing_nullable=False)
    op.alter_column('domain_events', 'aggregate_type',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='聚合根类型，如"Novel"、"Chapter"',
               existing_nullable=False)
    op.alter_column('domain_events', 'event_version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='事件版本号，用于事件模式演化',
               existing_nullable=False)
    op.alter_column('domain_events', 'event_type',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='事件类型，如"ChapterCreated"、"ReviewCompleted"',
               existing_nullable=False)
    op.alter_column('domain_events', 'causation_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='因果链ID，表示引发此事件的上级事件',
               existing_nullable=True)
    op.alter_column('domain_events', 'correlation_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='关联ID，用于追踪同一业务流程中的相关事件',
               existing_nullable=True)
    op.alter_column('domain_events', 'event_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='事件唯一标识符',
               existing_nullable=False)
    op.alter_column('domain_events', 'id',
               existing_type=sa.BIGINT(),
               comment=None,
               existing_comment='自增主键，用于保证事件顺序',
               existing_nullable=False,
               autoincrement=True)
    op.alter_column('concept_templates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('concept_templates', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('concept_templates', 'created_by',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='创建者，如"system"、"admin"或具体用户',
               existing_nullable=True,
               existing_server_default=sa.text("'system'::character varying"))
    op.alter_column('concept_templates', 'is_active',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否启用，用于管理可用的立意模板',
               existing_nullable=False)
    op.alter_column('concept_templates', 'cultural_specificity',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='文化特异性，如"东方哲学"、"西方哲学"、"普世价值"',
               existing_nullable=True)
    op.alter_column('concept_templates', 'universal_appeal',
               existing_type=sa.BOOLEAN(),
               comment=None,
               existing_comment='是否具有普遍意义，跨文化的普适性',
               existing_nullable=False)
    op.alter_column('concept_templates', 'complexity_level',
               existing_type=sa.VARCHAR(length=20),
               comment=None,
               existing_comment='思辨复杂度：simple, medium, complex',
               existing_nullable=False)
    op.alter_column('concept_templates', 'thematic_tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='主题标签，如["成长","选择","牺牲","真理"]，JSON数组格式',
               existing_nullable=False)
    op.alter_column('concept_templates', 'philosophical_category',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='哲学类别，如"存在主义"、"人道主义"、"理想主义"',
               existing_nullable=True)
    op.alter_column('concept_templates', 'emotional_core',
               existing_type=sa.VARCHAR(length=500),
               comment=None,
               existing_comment='情感核心与内在冲突，描述人物可能面临的情感挑战',
               existing_nullable=False)
    op.alter_column('concept_templates', 'philosophical_depth',
               existing_type=sa.VARCHAR(length=1000),
               comment=None,
               existing_comment='哲学思辨的深度表达，探讨存在、认知、道德等层面',
               existing_nullable=False)
    op.alter_column('concept_templates', 'description',
               existing_type=sa.VARCHAR(length=800),
               comment=None,
               existing_comment='立意的深层含义阐述，不超过800字符',
               existing_nullable=False)
    op.alter_column('concept_templates', 'core_idea',
               existing_type=sa.VARCHAR(length=200),
               comment=None,
               existing_comment='核心抽象思想，如"知识与无知的深刻对立"',
               existing_nullable=False)
    op.alter_column('concept_templates', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='立意模板的唯一标识符',
               existing_nullable=False)
    op.alter_column('command_inbox', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('command_inbox', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='命令接收时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('command_inbox', 'retry_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='重试次数，用于失败重试机制',
               existing_nullable=False)
    op.alter_column('command_inbox', 'error_message',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='错误信息，当状态为FAILED时必填',
               existing_nullable=True)
    op.alter_column('command_inbox', 'status',
               existing_type=postgresql.ENUM('RECEIVED', 'PROCESSING', 'COMPLETED', 'FAILED', name='commandstatus'),
               comment=None,
               existing_comment='命令状态，使用command_status枚举',
               existing_nullable=False)
    op.alter_column('command_inbox', 'payload',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='命令载荷，包含命令执行所需的所有数据',
               existing_nullable=True)
    op.alter_column('command_inbox', 'idempotency_key',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='幂等键，确保同一命令不会被重复处理',
               existing_nullable=False)
    op.alter_column('command_inbox', 'command_type',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='命令类型，如"ConfirmStoryConception"、"GenerateWorldview"',
               existing_nullable=False)
    op.alter_column('command_inbox', 'session_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='会话ID，关联到genesis_sessions或其他业务会话',
               existing_nullable=False)
    op.alter_column('command_inbox', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='命令唯一标识符',
               existing_nullable=False)
    op.alter_column('characters', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='角色信息最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('characters', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='角色创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('characters', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('characters', 'goals',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='角色目标数组，如["寻找失散的妹妹", "成为最强剑士"]',
               existing_nullable=True)
    op.alter_column('characters', 'personality_traits',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               comment=None,
               existing_comment='性格特征数组，如["勇敢", "正直", "幽默"]',
               existing_nullable=True)
    op.alter_column('characters', 'background_story',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='角色背景故事，包括身世、经历等',
               existing_nullable=True)
    op.alter_column('characters', 'description',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='角色外观、特征等描述信息',
               existing_nullable=True)
    op.alter_column('characters', 'role',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='角色定位，如"主角"、"反派"、"配角"等',
               existing_nullable=True)
    op.alter_column('characters', 'name',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='角色姓名，必填',
               existing_nullable=False)
    op.alter_column('characters', 'novel_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='所属小说ID，外键关联novels表',
               existing_nullable=False)
    op.alter_column('characters', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='角色唯一标识符，对应Neo4j中的app_id',
               existing_nullable=False)
    op.alter_column('chapters', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='章节最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapters', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='章节创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapters', 'version',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='乐观锁版本号，用于并发控制',
               existing_nullable=False)
    op.alter_column('chapters', 'published_version_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='指向当前已发布版本的ID，外键将在chapter_versions表创建后添加',
               existing_nullable=True)
    op.alter_column('chapters', 'status',
               existing_type=postgresql.ENUM('DRAFT', 'REVIEWING', 'REVISING', 'PUBLISHED', name='chapterstatus'),
               comment=None,
               existing_comment='章节当前状态，使用chapter_status枚举',
               existing_nullable=False)
    op.alter_column('chapters', 'title',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='章节标题，可选字段',
               existing_nullable=True)
    op.alter_column('chapters', 'chapter_number',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='章节序号，从1开始递增，同一小说内唯一',
               existing_nullable=False)
    op.alter_column('chapters', 'novel_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='所属小说ID，外键关联novels表，级联删除',
               existing_nullable=False)
    op.alter_column('chapters', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='章节唯一标识符，自动生成的UUID',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='版本创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('chapter_versions', 'metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='存储与此版本相关的额外元数据，JSONB格式',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'parent_version_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='指向上一个版本的ID，形成版本链',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'change_reason',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='修改原因说明，如"根据评论家意见修改"',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'created_by_agent_type',
               existing_type=postgresql.ENUM('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'),
               comment=None,
               existing_comment='创建此版本的AI智能体类型',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'word_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='该版本的字数统计',
               existing_nullable=True)
    op.alter_column('chapter_versions', 'content_url',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='指向MinIO中该版本内容的URL',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'version_number',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='版本号，从1开始递增，同一章节内唯一',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'chapter_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='关联的章节ID，外键关联chapters表',
               existing_nullable=False)
    op.alter_column('chapter_versions', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='章节版本的唯一标识符',
               existing_nullable=False)
    op.alter_column('async_tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='最后更新时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('async_tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='任务创建时间',
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('async_tasks', 'completed_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='任务完成时间，状态为COMPLETED或FAILED时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'started_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='任务开始执行时间，状态为RUNNING时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'max_retries',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='最大重试次数，默认3次',
               existing_nullable=False)
    op.alter_column('async_tasks', 'retry_count',
               existing_type=sa.INTEGER(),
               comment=None,
               existing_comment='当前重试次数',
               existing_nullable=False)
    op.alter_column('async_tasks', 'execution_node',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='执行任务的节点标识，用于分布式任务调度',
               existing_nullable=True)
    op.alter_column('async_tasks', 'error_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='错误信息详情，失败时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'result_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='任务执行结果，完成时必填',
               existing_nullable=True)
    op.alter_column('async_tasks', 'input_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='任务输入数据，JSON格式',
               existing_nullable=True)
    op.alter_column('async_tasks', 'progress',
               existing_type=sa.NUMERIC(precision=5, scale=2),
               comment=None,
               existing_comment='任务进度百分比，0.00-100.00',
               existing_nullable=False)
    op.alter_column('async_tasks', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'),
               comment=None,
               existing_comment='任务状态，使用task_status枚举',
               existing_nullable=False)
    op.alter_column('async_tasks', 'triggered_by_command_id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='触发此任务的命令ID，外键关联command_inbox表',
               existing_nullable=True)
    op.alter_column('async_tasks', 'task_type',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='任务类型，如"GenerateChapter"、"AnalyzeWorldview"',
               existing_nullable=False)
    op.alter_column('async_tasks', 'id',
               existing_type=sa.UUID(),
               comment=None,
               existing_comment='任务唯一标识符',
               existing_nullable=False)
    # ### end Alembic commands ###
