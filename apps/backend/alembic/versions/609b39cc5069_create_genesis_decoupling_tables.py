"""create_genesis_decoupling_tables

Revision ID: 609b39cc5069
Revises: f4a652259140
Create Date: 2025-09-17 20:33:20.876576

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '609b39cc5069'
down_revision: Union[str, Sequence[str], None] = 'f4a652259140'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('genesis_flows',
    sa.Column('id', sa.UUID(), nullable=False, comment='流程实例唯一标识符'),
    sa.Column('novel_id', sa.UUID(), nullable=False, comment='所属小说ID，外键关联novels表，级联删除'),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'ABANDONED', 'PAUSED', name='genesisstatus'), nullable=False, comment='流程状态：IN_PROGRESS/COMPLETED/ABANDONED/PAUSED'),
    sa.Column('current_stage', sa.Enum('INITIAL_PROMPT', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesisstage'), nullable=True, comment='当前所在阶段：INITIAL_PROMPT/WORLDVIEW/CHARACTERS/PLOT_OUTLINE/FINISHED'),
    sa.Column('version', sa.Integer(), nullable=False, comment='流程版本号，用于乐观并发控制'),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='全局聚合与跨阶段元数据，JSON格式存储'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='流程创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='流程最后更新时间'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('fk_genesis_flows_novel_id_novels'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genesis_flows')),
    sa.UniqueConstraint('novel_id', name='ux_genesis_flows_novel')
    )
    op.create_index('idx_genesis_flows_current_stage', 'genesis_flows', ['current_stage'], unique=False)
    op.create_index('idx_genesis_flows_novel_status', 'genesis_flows', ['novel_id', 'status'], unique=False)
    op.create_table('genesis_stage_records',
    sa.Column('id', sa.UUID(), nullable=False, comment='阶段记录唯一标识符'),
    sa.Column('flow_id', sa.UUID(), nullable=False, comment='所属流程ID，外键关联genesis_flows表'),
    sa.Column('stage', sa.Enum('INITIAL_PROMPT', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesisstage'), nullable=False, comment='阶段类型：INITIAL_PROMPT/WORLDVIEW/CHARACTERS/PLOT_OUTLINE'),
    sa.Column('status', sa.Enum('RUNNING', 'COMPLETED', 'FAILED', 'PAUSED', name='stagestatus'), nullable=False, comment='阶段状态：RUNNING/COMPLETED/FAILED/PAUSED'),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='阶段参数与用户选择，JSON格式存储'),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='阶段产出索引/摘要：如世界观条目/角色ID列表等'),
    sa.Column('iteration_count', sa.Integer(), nullable=False, comment='迭代次数，支持阶段重复执行'),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='阶段指标：tokens/cost/latency等聚合数据'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='阶段开始时间'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='阶段完成时间'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='记录创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='记录最后更新时间'),
    sa.ForeignKeyConstraint(['flow_id'], ['genesis_flows.id'], name=op.f('fk_genesis_stage_records_flow_id_genesis_flows'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genesis_stage_records'))
    )
    op.create_index('idx_stage_records_flow_stage', 'genesis_stage_records', ['flow_id', 'stage', 'created_at'], unique=False)
    op.create_index('idx_stage_records_status', 'genesis_stage_records', ['status'], unique=False)
    op.create_table('genesis_stage_sessions',
    sa.Column('id', sa.UUID(), nullable=False, comment='关联记录唯一标识符'),
    sa.Column('stage_id', sa.UUID(), nullable=False, comment='阶段记录ID，外键关联genesis_stage_records表'),
    sa.Column('session_id', sa.UUID(), nullable=False, comment='对话会话ID，外键关联conversation_sessions表'),
    sa.Column('status', sa.Enum('ACTIVE', 'ARCHIVED', 'CLOSED', name='stagesessionstatus'), nullable=False, comment='关联状态：ACTIVE/ARCHIVED/CLOSED'),
    sa.Column('is_primary', sa.Boolean(), nullable=False, comment='是否为主会话，用于默认展示'),
    sa.Column('session_kind', sa.String(length=64), nullable=True, comment='会话类别：user_interaction/review/agent_autonomous等'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='关联创建时间'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='关联最后更新时间'),
    sa.ForeignKeyConstraint(['session_id'], ['conversation_sessions.id'], name=op.f('fk_genesis_stage_sessions_session_id_conversation_sessions'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['stage_id'], ['genesis_stage_records.id'], name=op.f('fk_genesis_stage_sessions_stage_id_genesis_stage_records'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genesis_stage_sessions')),
    sa.UniqueConstraint('stage_id', 'session_id', name='ux_stage_session')
    )
    op.create_index('idx_stage_sessions_primary', 'genesis_stage_sessions', ['stage_id', 'is_primary'], unique=False)
    op.create_index('idx_stage_sessions_session', 'genesis_stage_sessions', ['session_id'], unique=False)
    op.create_index('idx_stage_sessions_stage', 'genesis_stage_sessions', ['stage_id'], unique=False)
    op.drop_index(op.f('idx_genesis_sessions_current_stage'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_novel_id'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_status'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_status_stage'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_user_id'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_user_status'), table_name='genesis_sessions')
    op.drop_table('genesis_sessions')
    op.create_unique_constraint('uq_conversation_round', 'conversation_rounds', ['session_id', 'round_path'])
    op.create_index('uq_conversation_round_correlation', 'conversation_rounds', ['session_id', 'correlation_id'], unique=True, postgresql_where=sa.text('correlation_id IS NOT NULL'))
    op.alter_column('conversation_sessions', 'status',
               existing_type=sa.VARCHAR(length=16),
               server_default=None,
               existing_nullable=False)
    op.alter_column('conversation_sessions', 'version',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('conversation_sessions', 'round_sequence',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('uq_conversation_sessions_active_per_scope'), table_name='conversation_sessions', postgresql_where="((status)::text = 'ACTIVE'::text)")
    op.drop_column('conversation_sessions', 'state')
    op.drop_column('conversation_sessions', 'stage')
    op.drop_index(op.f('idx_novels_user_id'), table_name='novels')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_novels_user_id'), 'novels', ['user_id'], unique=False)
    op.add_column('conversation_sessions', sa.Column('stage', sa.VARCHAR(length=64), autoincrement=False, nullable=True))
    op.add_column('conversation_sessions', sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.create_index(op.f('uq_conversation_sessions_active_per_scope'), 'conversation_sessions', ['scope_type', 'scope_id'], unique=True, postgresql_where="((status)::text = 'ACTIVE'::text)")
    op.alter_column('conversation_sessions', 'round_sequence',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('conversation_sessions', 'version',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('conversation_sessions', 'status',
               existing_type=sa.VARCHAR(length=16),
               server_default=sa.text("'ACTIVE'::character varying"),
               existing_nullable=False)
    op.drop_index('uq_conversation_round_correlation', table_name='conversation_rounds', postgresql_where=sa.text('correlation_id IS NOT NULL'))
    op.drop_constraint('uq_conversation_round', 'conversation_rounds', type_='unique')
    op.create_table('genesis_sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False, comment='创世会话的唯一标识符'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=True, comment='流程完成后关联的小说ID，允许为空（流程未完成时）'),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True, comment='发起创世流程的用户ID，用于权限控制和用户关联'),
    sa.Column('status', postgresql.ENUM('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='genesisstatus'), autoincrement=False, nullable=False, comment='整个创世会话的状态，使用genesis_status枚举'),
    sa.Column('current_stage', postgresql.ENUM('CONCEPT_SELECTION', 'STORY_CONCEPTION', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', 'INITIAL_PROMPT', name='genesisstage'), autoincrement=False, nullable=False, comment='当前所处的业务阶段，使用genesis_stage枚举'),
    sa.Column('confirmed_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='存储每个阶段已确认的最终数据，JSONB格式，包含各阶段的输出结果'),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创世会话创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创世会话最后更新时间'),
    sa.CheckConstraint("current_stage = 'CONCEPT_SELECTION'::genesisstage AND status = 'IN_PROGRESS'::genesisstatus OR current_stage = 'STORY_CONCEPTION'::genesisstage AND status = 'IN_PROGRESS'::genesisstatus OR current_stage = 'WORLDVIEW'::genesisstage AND status = 'IN_PROGRESS'::genesisstatus OR current_stage = 'CHARACTERS'::genesisstage AND status = 'IN_PROGRESS'::genesisstatus OR current_stage = 'PLOT_OUTLINE'::genesisstage AND status = 'IN_PROGRESS'::genesisstatus OR current_stage = 'FINISHED'::genesisstage AND (status = ANY (ARRAY['COMPLETED'::genesisstatus, 'ABANDONED'::genesisstatus]))", name=op.f('ck_genesis_sessions_check_genesis_stage_progression')),
    sa.CheckConstraint("status <> 'COMPLETED'::genesisstatus OR status = 'COMPLETED'::genesisstatus AND novel_id IS NOT NULL", name=op.f('ck_genesis_sessions_check_completed_has_novel')),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('fk_genesis_sessions_novel_id_novels'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_genesis_sessions'))
    )
    op.create_index(op.f('idx_genesis_sessions_user_status'), 'genesis_sessions', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_user_id'), 'genesis_sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_status_stage'), 'genesis_sessions', ['status', 'current_stage'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_status'), 'genesis_sessions', ['status'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_novel_id'), 'genesis_sessions', ['novel_id'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_current_stage'), 'genesis_sessions', ['current_stage'], unique=False)
    op.drop_index('idx_stage_sessions_stage', table_name='genesis_stage_sessions')
    op.drop_index('idx_stage_sessions_session', table_name='genesis_stage_sessions')
    op.drop_index('idx_stage_sessions_primary', table_name='genesis_stage_sessions')
    op.drop_table('genesis_stage_sessions')
    op.drop_index('idx_stage_records_status', table_name='genesis_stage_records')
    op.drop_index('idx_stage_records_flow_stage', table_name='genesis_stage_records')
    op.drop_table('genesis_stage_records')
    op.drop_index('idx_genesis_flows_novel_status', table_name='genesis_flows')
    op.drop_index('idx_genesis_flows_current_stage', table_name='genesis_flows')
    op.drop_table('genesis_flows')
    # ### end Alembic commands ###
