"""Initial migration for user authentication

Revision ID: 86c52aea2834
Revises: 
Create Date: 2025-07-08 21:44:58.860311

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '86c52aea2834'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.String(length=1000), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True),
    sa.Column('email_verified_at', sa.DateTime(), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_locked_until', 'users', ['locked_until'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('email_verifications',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('purpose', sa.Enum('EMAIL_VERIFY', 'PASSWORD_RESET', name='verificationpurpose'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('requested_from_ip', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_verification_expires', 'email_verifications', ['expires_at'], unique=False)
    op.create_index('idx_verification_token', 'email_verifications', ['token'], unique=False)
    op.create_index('idx_verification_user_purpose', 'email_verifications', ['user_id', 'purpose'], unique=False)
    op.create_index(op.f('ix_email_verifications_id'), 'email_verifications', ['id'], unique=False)
    op.create_index(op.f('ix_email_verifications_token'), 'email_verifications', ['token'], unique=True)
    op.create_table('sessions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=500), nullable=False),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('device_name', sa.String(length=100), nullable=True),
    sa.Column('access_token_expires_at', sa.DateTime(), nullable=False),
    sa.Column('refresh_token_expires_at', sa.DateTime(), nullable=False),
    sa.Column('last_accessed_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('revoke_reason', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_session_expires', 'sessions', ['access_token_expires_at', 'refresh_token_expires_at'], unique=False)
    op.create_index('idx_session_jti_active', 'sessions', ['jti', 'is_active'], unique=False)
    op.create_index('idx_session_refresh_token_active', 'sessions', ['refresh_token', 'is_active'], unique=False)
    op.create_index('idx_session_user_active', 'sessions', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_sessions_id'), 'sessions', ['id'], unique=False)
    op.create_index(op.f('ix_sessions_ip_address'), 'sessions', ['ip_address'], unique=False)
    op.create_index(op.f('ix_sessions_jti'), 'sessions', ['jti'], unique=True)
    op.create_index(op.f('ix_sessions_refresh_token'), 'sessions', ['refresh_token'], unique=True)
    op.drop_index(op.f('idx_command_inbox_command_type'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_created_at'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_idempotency_key'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_payload_gin'), table_name='command_inbox', postgresql_using='gin')
    op.drop_index(op.f('idx_command_inbox_retry_status'), table_name='command_inbox', postgresql_where="(status = ANY (ARRAY['RECEIVED'::command_status, 'PROCESSING'::command_status, 'FAILED'::command_status]))")
    op.drop_index(op.f('idx_command_inbox_session_id'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_session_status'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_status'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_status_created'), table_name='command_inbox')
    op.drop_index(op.f('idx_command_inbox_unique_pending_command'), table_name='command_inbox', postgresql_where="(status = ANY (ARRAY['RECEIVED'::command_status, 'PROCESSING'::command_status]))")
    op.drop_table('command_inbox')
    op.drop_index(op.f('idx_agent_workload_analysis'), table_name='chapter_versions')
    op.drop_index(op.f('idx_chapter_versions_agent_created'), table_name='chapter_versions')
    op.drop_index(op.f('idx_chapter_versions_chapter_id'), table_name='chapter_versions')
    op.drop_index(op.f('idx_chapter_versions_parent_chain'), table_name='chapter_versions', postgresql_where='(parent_version_id IS NOT NULL)')
    op.drop_table('chapter_versions')
    op.drop_index(op.f('idx_worldview_entries_name_search'), table_name='worldview_entries', postgresql_using='gin')
    op.drop_index(op.f('idx_worldview_entries_novel_id'), table_name='worldview_entries')
    op.drop_index(op.f('idx_worldview_entries_tags_gin'), table_name='worldview_entries', postgresql_using='gin')
    op.drop_index(op.f('idx_worldview_entries_type_novel'), table_name='worldview_entries')
    op.drop_table('worldview_entries')
    op.drop_index(op.f('idx_flow_resume_handles_context_data_gin'), table_name='flow_resume_handles', postgresql_using='gin')
    op.drop_index(op.f('idx_flow_resume_handles_correlation_id'), table_name='flow_resume_handles')
    op.drop_index(op.f('idx_flow_resume_handles_correlation_status'), table_name='flow_resume_handles')
    op.drop_index(op.f('idx_flow_resume_handles_expires_at'), table_name='flow_resume_handles', postgresql_where='(expires_at IS NOT NULL)')
    op.drop_index(op.f('idx_flow_resume_handles_flow_run_id'), table_name='flow_resume_handles', postgresql_where='(flow_run_id IS NOT NULL)')
    op.drop_index(op.f('idx_flow_resume_handles_resume_handle_gin'), table_name='flow_resume_handles', postgresql_using='gin')
    op.drop_index(op.f('idx_flow_resume_handles_status'), table_name='flow_resume_handles')
    op.drop_index(op.f('idx_flow_resume_handles_status_expires'), table_name='flow_resume_handles')
    op.drop_index(op.f('idx_flow_resume_handles_unique_correlation'), table_name='flow_resume_handles', postgresql_where="(status = ANY (ARRAY['PENDING_PAUSE'::handle_status, 'PAUSED'::handle_status]))")
    op.drop_table('flow_resume_handles')
    op.drop_index(op.f('idx_genesis_flow_analysis'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_current_stage'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_novel_id'), table_name='genesis_sessions', postgresql_where='(novel_id IS NOT NULL)')
    op.drop_index(op.f('idx_genesis_sessions_status'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_status_stage'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_user_id'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_sessions_user_status'), table_name='genesis_sessions')
    op.drop_index(op.f('idx_genesis_user_sessions'), table_name='genesis_sessions')
    op.drop_table('genesis_sessions')
    op.drop_index(op.f('idx_story_arcs_novel_id'), table_name='story_arcs')
    op.drop_table('story_arcs')
    op.drop_index(op.f('idx_characters_name_search'), table_name='characters', postgresql_using='gin')
    op.drop_index(op.f('idx_characters_novel_id'), table_name='characters')
    op.drop_index(op.f('idx_characters_novel_role'), table_name='characters')
    op.drop_table('characters')
    op.drop_index(op.f('idx_async_tasks_command_id'), table_name='async_tasks', postgresql_where='(triggered_by_command_id IS NOT NULL)')
    op.drop_index(op.f('idx_async_tasks_created_at'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_error_data_gin'), table_name='async_tasks', postgresql_using='gin')
    op.drop_index(op.f('idx_async_tasks_execution_monitoring'), table_name='async_tasks', postgresql_where="(status = 'RUNNING'::task_status)")
    op.drop_index(op.f('idx_async_tasks_execution_node'), table_name='async_tasks', postgresql_where='(execution_node IS NOT NULL)')
    op.drop_index(op.f('idx_async_tasks_input_data_gin'), table_name='async_tasks', postgresql_using='gin')
    op.drop_index(op.f('idx_async_tasks_result_data_gin'), table_name='async_tasks', postgresql_using='gin')
    op.drop_index(op.f('idx_async_tasks_retry_analysis'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_status'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_status_created'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_status_type'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_task_type'), table_name='async_tasks')
    op.drop_index(op.f('idx_async_tasks_type_created'), table_name='async_tasks')
    op.drop_table('async_tasks')
    op.drop_index(op.f('idx_concept_templates_active_complexity'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_category_appeal'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_complexity_level'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_cultural_specificity'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_is_active'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_philosophical_category'), table_name='concept_templates')
    op.drop_index(op.f('idx_concept_templates_thematic_tags'), table_name='concept_templates', postgresql_using='gin')
    op.drop_index(op.f('idx_concept_templates_universal_appeal'), table_name='concept_templates')
    op.drop_table('concept_templates')
    op.drop_index(op.f('idx_novels_status_updated'), table_name='novels')
    op.drop_index(op.f('idx_novels_target_completed'), table_name='novels', postgresql_where="(status = ANY (ARRAY['GENERATING'::novel_status, 'PAUSED'::novel_status]))")
    op.drop_table('novels')
    op.drop_index(op.f('idx_event_outbox_created_at'), table_name='event_outbox')
    op.drop_index(op.f('idx_event_outbox_headers_gin'), table_name='event_outbox', postgresql_using='gin')
    op.drop_index(op.f('idx_event_outbox_key'), table_name='event_outbox', postgresql_where='(key IS NOT NULL)')
    op.drop_index(op.f('idx_event_outbox_partition_key'), table_name='event_outbox', postgresql_where='(partition_key IS NOT NULL)')
    op.drop_index(op.f('idx_event_outbox_payload_gin'), table_name='event_outbox', postgresql_using='gin')
    op.drop_index(op.f('idx_event_outbox_pending_scheduled'), table_name='event_outbox', postgresql_where="(status = 'PENDING'::outbox_status)")
    op.drop_index(op.f('idx_event_outbox_retry_count'), table_name='event_outbox')
    op.drop_index(op.f('idx_event_outbox_status'), table_name='event_outbox')
    op.drop_index(op.f('idx_event_outbox_status_created'), table_name='event_outbox')
    op.drop_index(op.f('idx_event_outbox_topic'), table_name='event_outbox')
    op.drop_index(op.f('idx_event_outbox_topic_status'), table_name='event_outbox')
    op.drop_table('event_outbox')
    op.drop_index(op.f('idx_chapters_novel_id'), table_name='chapters')
    op.drop_index(op.f('idx_chapters_novel_status_number'), table_name='chapters')
    op.drop_index(op.f('idx_chapters_published_version_id'), table_name='chapters', postgresql_where='(published_version_id IS NOT NULL)')
    op.drop_index(op.f('idx_chapters_published_version_lookup'), table_name='chapters', postgresql_where='(published_version_id IS NOT NULL)')
    op.drop_index(op.f('idx_novel_progress_stats'), table_name='chapters', postgresql_where="(status = 'PUBLISHED'::chapter_status)")
    op.drop_table('chapters')
    op.drop_index(op.f('idx_agent_review_workload'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_chapter_id'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_chapter_version_agent'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_chapter_version_id'), table_name='reviews')
    op.drop_index(op.f('idx_reviews_score_range'), table_name='reviews', postgresql_where='(score IS NOT NULL)')
    op.drop_table('reviews')
    op.drop_index(op.f('idx_domain_events_aggregate'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_aggregate_event_type'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_aggregate_type_time'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_causation_id'), table_name='domain_events', postgresql_where='(causation_id IS NOT NULL)')
    op.drop_index(op.f('idx_domain_events_correlation_causation'), table_name='domain_events', postgresql_where='((correlation_id IS NOT NULL) AND (causation_id IS NOT NULL))')
    op.drop_index(op.f('idx_domain_events_correlation_id'), table_name='domain_events', postgresql_where='(correlation_id IS NOT NULL)')
    op.drop_index(op.f('idx_domain_events_created_at'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_event_type'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_event_type_time'), table_name='domain_events')
    op.drop_index(op.f('idx_domain_events_metadata_gin'), table_name='domain_events', postgresql_using='gin')
    op.drop_index(op.f('idx_domain_events_payload_gin'), table_name='domain_events', postgresql_using='gin')
    op.drop_table('domain_events')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('domain_events',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False, comment='事件的自增序号，保证严格的时间顺序'),
    sa.Column('event_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='事件的全局唯一标识符，用于外部引用和去重'),
    sa.Column('correlation_id', sa.UUID(), autoincrement=False, nullable=True, comment='用于追踪一个完整的业务流程或请求链，相同流程的事件具有相同的correlation_id'),
    sa.Column('causation_id', sa.UUID(), autoincrement=False, nullable=True, comment='指向触发此事件的上一个事件的event_id，形成因果链，便于追踪事件传播'),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False, comment='事件的唯一类型标识，采用分层命名如"genesis.concept.proposed"'),
    sa.Column('event_version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='事件模型的版本号，用于事件结构的向后兼容'),
    sa.Column('aggregate_type', sa.TEXT(), autoincrement=False, nullable=False, comment='聚合根类型，如GENESIS_SESSION、NOVEL、CHAPTER等'),
    sa.Column('aggregate_id', sa.TEXT(), autoincrement=False, nullable=False, comment='聚合根的ID，与aggregate_type结合唯一标识业务实体'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='事件的具体数据内容，JSONB格式，包含事件的所有业务信息'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='附加元数据，JSONB格式，包含user_id、source_service、ip_address等上下文信息'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='事件创建时间戳，不可修改，确保事件的不可变性'),
    sa.PrimaryKeyConstraint('id', name=op.f('domain_events_pkey')),
    sa.UniqueConstraint('event_id', name=op.f('domain_events_event_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='统一的领域事件日志，是整个系统所有业务事实的唯一、不可变来源（Source of Truth）。表设计支持未来按时间分区以应对大规模数据。'
    )
    op.create_index(op.f('idx_domain_events_payload_gin'), 'domain_events', ['payload'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_domain_events_metadata_gin'), 'domain_events', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_domain_events_event_type_time'), 'domain_events', ['event_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_domain_events_event_type'), 'domain_events', ['event_type'], unique=False)
    op.create_index(op.f('idx_domain_events_created_at'), 'domain_events', ['created_at'], unique=False)
    op.create_index(op.f('idx_domain_events_correlation_id'), 'domain_events', ['correlation_id'], unique=False, postgresql_where='(correlation_id IS NOT NULL)')
    op.create_index(op.f('idx_domain_events_correlation_causation'), 'domain_events', ['correlation_id', 'causation_id'], unique=False, postgresql_where='((correlation_id IS NOT NULL) AND (causation_id IS NOT NULL))')
    op.create_index(op.f('idx_domain_events_causation_id'), 'domain_events', ['causation_id'], unique=False, postgresql_where='(causation_id IS NOT NULL)')
    op.create_index(op.f('idx_domain_events_aggregate_type_time'), 'domain_events', ['aggregate_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_domain_events_aggregate_event_type'), 'domain_events', ['aggregate_type', 'event_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_domain_events_aggregate'), 'domain_events', ['aggregate_type', 'aggregate_id'], unique=False)
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='评审记录唯一标识符'),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False, comment='被评审的章节ID，外键关联chapters表'),
    sa.Column('chapter_version_id', sa.UUID(), autoincrement=False, nullable=False, comment='评审针对的具体章节版本ID，外键关联chapter_versions表'),
    sa.Column('agent_type', postgresql.ENUM('worldsmith', 'plotmaster', 'outliner', 'director', 'character_expert', 'worldbuilder', 'writer', 'critic', 'fact_checker', 'rewriter', name='agent_type'), autoincrement=False, nullable=False, comment='执行评审的AI智能体类型'),
    sa.Column('review_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False, comment='评审类型，如CRITIC(评论家审查)、FACT_CHECK(事实核查)'),
    sa.Column('score', sa.NUMERIC(precision=3, scale=1), autoincrement=False, nullable=True, comment='评分，范围0.0-10.0，保留一位小数'),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True, comment='评审意见和建议的详细文本'),
    sa.Column('is_consistent', sa.BOOLEAN(), autoincrement=False, nullable=True, comment='是否与小说设定一致，用于事实核查'),
    sa.Column('issues_found', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='发现的问题列表，如["时间线冲突", "角色性格不一致"]'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='评审创建时间，不会更新'),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], name=op.f('reviews_chapter_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['chapter_version_id'], ['chapter_versions.id'], name=op.f('reviews_chapter_version_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('reviews_pkey')),
    comment='记录每一次对章节草稿的评审结果。'
    )
    op.create_index(op.f('idx_reviews_score_range'), 'reviews', ['score'], unique=False, postgresql_where='(score IS NOT NULL)')
    op.create_index(op.f('idx_reviews_chapter_version_id'), 'reviews', ['chapter_version_id'], unique=False)
    op.create_index(op.f('idx_reviews_chapter_version_agent'), 'reviews', ['chapter_id', 'chapter_version_id', 'agent_type'], unique=False)
    op.create_index(op.f('idx_reviews_chapter_id'), 'reviews', ['chapter_id'], unique=False)
    op.create_index(op.f('idx_agent_review_workload'), 'reviews', ['agent_type', 'created_at'], unique=False)
    op.create_table('chapters',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='章节唯一标识符，自动生成的UUID'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=False, comment='所属小说ID，外键关联novels表，级联删除'),
    sa.Column('chapter_number', sa.INTEGER(), autoincrement=False, nullable=False, comment='章节序号，从1开始递增，同一小说内唯一'),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=True, comment='章节标题，可选字段'),
    sa.Column('status', postgresql.ENUM('DRAFT', 'REVIEWING', 'REVISING', 'PUBLISHED', name='chapter_status'), server_default=sa.text("'DRAFT'::chapter_status"), autoincrement=False, nullable=False, comment='章节当前状态，使用chapter_status枚举'),
    sa.Column('published_version_id', sa.UUID(), autoincrement=False, nullable=True, comment='指向当前已发布版本的ID，外键将在chapter_versions表创建后添加'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='章节创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='章节最后更新时间'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name='chapters_novel_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['published_version_id'], ['chapter_versions.id'], name='fk_chapters_published_version', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='chapters_pkey'),
    sa.UniqueConstraint('novel_id', 'chapter_number', name='chapters_novel_id_chapter_number_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='存储章节的元数据，与具体的版本内容分离。',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_novel_progress_stats'), 'chapters', ['novel_id', 'status'], unique=False, postgresql_where="(status = 'PUBLISHED'::chapter_status)")
    op.create_index(op.f('idx_chapters_published_version_lookup'), 'chapters', ['published_version_id'], unique=False, postgresql_where='(published_version_id IS NOT NULL)')
    op.create_index(op.f('idx_chapters_published_version_id'), 'chapters', ['published_version_id'], unique=False, postgresql_where='(published_version_id IS NOT NULL)')
    op.create_index(op.f('idx_chapters_novel_status_number'), 'chapters', ['novel_id', 'status', 'chapter_number'], unique=False)
    op.create_index(op.f('idx_chapters_novel_id'), 'chapters', ['novel_id'], unique=False)
    op.create_table('event_outbox',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='发件箱记录的唯一标识符'),
    sa.Column('topic', sa.TEXT(), autoincrement=False, nullable=False, comment='目标Kafka主题名称，如"domain-events"、"notifications"等'),
    sa.Column('key', sa.TEXT(), autoincrement=False, nullable=True, comment='Kafka消息的Key，用于确保相关消息的顺序性'),
    sa.Column('partition_key', sa.TEXT(), autoincrement=False, nullable=True, comment='分区键，用于路由算法确定消息发往哪个分区，可与key不同'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='消息的完整内容，JSONB格式，包含所有需要发布的数据'),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='消息头信息，JSONB格式，包含元数据如message_type、correlation_id等'),
    sa.Column('status', postgresql.ENUM('PENDING', 'SENT', name='outbox_status'), server_default=sa.text("'PENDING'::outbox_status"), autoincrement=False, nullable=False, comment='消息发送状态，使用outbox_status枚举'),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='重试次数，用于重试机制'),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('5'), autoincrement=False, nullable=False, comment='最大重试次数，超过后标记为失败'),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True, comment='最后一次发送失败的错误信息'),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='计划发送时间，支持延迟发送功能'),
    sa.Column('sent_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='实际发送成功的时间戳'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='记录创建时间'),
    sa.CheckConstraint("status <> 'SENT'::outbox_status OR status = 'SENT'::outbox_status AND sent_at IS NOT NULL", name=op.f('check_sent_has_timestamp')),
    sa.CheckConstraint('max_retries >= 0', name=op.f('check_max_retries_non_negative')),
    sa.CheckConstraint('retry_count >= 0 AND retry_count <= max_retries', name=op.f('check_retry_count_valid')),
    sa.CheckConstraint('scheduled_at IS NULL OR scheduled_at >= created_at', name=op.f('check_scheduled_at_future')),
    sa.PrimaryKeyConstraint('id', name=op.f('event_outbox_pkey')),
    comment='事务性发件箱，保证数据库写入与向Kafka发布事件之间的原子性。'
    )
    op.create_index(op.f('idx_event_outbox_topic_status'), 'event_outbox', ['topic', 'status'], unique=False)
    op.create_index(op.f('idx_event_outbox_topic'), 'event_outbox', ['topic'], unique=False)
    op.create_index(op.f('idx_event_outbox_status_created'), 'event_outbox', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_event_outbox_status'), 'event_outbox', ['status'], unique=False)
    op.create_index(op.f('idx_event_outbox_retry_count'), 'event_outbox', ['retry_count'], unique=False)
    op.create_index(op.f('idx_event_outbox_pending_scheduled'), 'event_outbox', ['status', 'scheduled_at'], unique=False, postgresql_where="(status = 'PENDING'::outbox_status)")
    op.create_index(op.f('idx_event_outbox_payload_gin'), 'event_outbox', ['payload'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_event_outbox_partition_key'), 'event_outbox', ['partition_key'], unique=False, postgresql_where='(partition_key IS NOT NULL)')
    op.create_index(op.f('idx_event_outbox_key'), 'event_outbox', ['key'], unique=False, postgresql_where='(key IS NOT NULL)')
    op.create_index(op.f('idx_event_outbox_headers_gin'), 'event_outbox', ['headers'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_event_outbox_created_at'), 'event_outbox', ['created_at'], unique=False)
    op.create_table('novels',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='小说唯一标识符，自动生成的UUID'),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='小说标题，必填，最长255个字符'),
    sa.Column('theme', sa.TEXT(), autoincrement=False, nullable=True, comment='小说主题描述，如"科幻冒险"、"都市言情"等'),
    sa.Column('writing_style', sa.TEXT(), autoincrement=False, nullable=True, comment='写作风格描述，如"幽默诙谐"、"严肃写实"等'),
    sa.Column('status', postgresql.ENUM('GENESIS', 'GENERATING', 'PAUSED', 'COMPLETED', 'FAILED', name='novel_status'), server_default=sa.text("'GENESIS'::novel_status"), autoincrement=False, nullable=False, comment='小说生成状态，使用novel_status枚举'),
    sa.Column('target_chapters', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='目标章节数，用户设定的计划章节总数'),
    sa.Column('completed_chapters', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='已完成章节数，系统自动统计'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创建时间，带时区的时间戳'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='最后更新时间，通过触发器自动维护'),
    sa.PrimaryKeyConstraint('id', name='novels_pkey'),
    comment='存储每个独立小说项目的核心元数据。',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_novels_target_completed'), 'novels', ['target_chapters', 'completed_chapters'], unique=False, postgresql_where="(status = ANY (ARRAY['GENERATING'::novel_status, 'PAUSED'::novel_status]))")
    op.create_index(op.f('idx_novels_status_updated'), 'novels', ['status', 'updated_at'], unique=False)
    op.create_table('concept_templates',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='立意模板的唯一标识符'),
    sa.Column('core_idea', sa.VARCHAR(length=200), autoincrement=False, nullable=False, comment='核心抽象思想，如"知识与无知的深刻对立"'),
    sa.Column('description', sa.VARCHAR(length=800), autoincrement=False, nullable=False, comment='立意的深层含义阐述，不超过800字符'),
    sa.Column('philosophical_depth', sa.VARCHAR(length=1000), autoincrement=False, nullable=False, comment='哲学思辨的深度表达，探讨存在、认知、道德等层面'),
    sa.Column('emotional_core', sa.VARCHAR(length=500), autoincrement=False, nullable=False, comment='情感核心与内在冲突，描述人物可能面临的情感挑战'),
    sa.Column('philosophical_category', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='哲学类别，如"存在主义"、"人道主义"、"理想主义"'),
    sa.Column('thematic_tags', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), autoincrement=False, nullable=False, comment='主题标签，如["成长","选择","牺牲","真理"]，JSON数组格式'),
    sa.Column('complexity_level', sa.VARCHAR(length=20), server_default=sa.text("'medium'::character varying"), autoincrement=False, nullable=False, comment='思辨复杂度：simple, medium, complex'),
    sa.Column('universal_appeal', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='是否具有普遍意义，跨文化的普适性'),
    sa.Column('cultural_specificity', sa.VARCHAR(length=100), autoincrement=False, nullable=True, comment='文化特异性，如"东方哲学"、"西方哲学"、"普世价值"'),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False, comment='是否启用，用于管理可用的立意模板'),
    sa.Column('created_by', sa.VARCHAR(length=50), server_default=sa.text("'system'::character varying"), autoincrement=False, nullable=True, comment='创建者，如"system"、"admin"或具体用户'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("complexity_level::text = ANY (ARRAY['simple'::character varying, 'medium'::character varying, 'complex'::character varying]::text[])", name=op.f('check_complexity_level')),
    sa.CheckConstraint('char_length(core_idea::text) >= 10', name=op.f('check_core_idea_length')),
    sa.CheckConstraint('char_length(description::text) >= 50', name=op.f('check_description_length')),
    sa.PrimaryKeyConstraint('id', name=op.f('concept_templates_pkey')),
    comment='立意模板表：存储抽象的哲学立意供用户在创世流程中选择和发展'
    )
    op.create_index(op.f('idx_concept_templates_universal_appeal'), 'concept_templates', ['universal_appeal'], unique=False)
    op.create_index(op.f('idx_concept_templates_thematic_tags'), 'concept_templates', ['thematic_tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_concept_templates_philosophical_category'), 'concept_templates', ['philosophical_category'], unique=False)
    op.create_index(op.f('idx_concept_templates_is_active'), 'concept_templates', ['is_active'], unique=False)
    op.create_index(op.f('idx_concept_templates_cultural_specificity'), 'concept_templates', ['cultural_specificity'], unique=False)
    op.create_index(op.f('idx_concept_templates_complexity_level'), 'concept_templates', ['complexity_level'], unique=False)
    op.create_index(op.f('idx_concept_templates_category_appeal'), 'concept_templates', ['philosophical_category', 'universal_appeal'], unique=False)
    op.create_index(op.f('idx_concept_templates_active_complexity'), 'concept_templates', ['is_active', 'complexity_level'], unique=False)
    op.create_table('async_tasks',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='任务的唯一标识符'),
    sa.Column('task_type', sa.TEXT(), autoincrement=False, nullable=False, comment='任务类型标识，如"genesis.concept_generation"、"llm.text_generation"、"image.processing"等'),
    sa.Column('triggered_by_command_id', sa.UUID(), autoincrement=False, nullable=True, comment='触发此任务的命令ID，外键关联command_inbox表，可为空（系统内部任务）'),
    sa.Column('status', postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='task_status'), server_default=sa.text("'PENDING'::task_status"), autoincrement=False, nullable=False, comment='任务执行状态，使用task_status枚举'),
    sa.Column('progress', sa.NUMERIC(precision=5, scale=2), server_default=sa.text('0.0'), autoincrement=False, nullable=False, comment='任务进度百分比，范围0.00-100.00'),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='任务输入参数，JSONB格式，包含执行任务所需的所有数据'),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='任务执行成功后的结果数据，JSONB格式'),
    sa.Column('error_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='任务执行失败时的错误信息，JSONB格式，包含错误码、错误消息、堆栈跟踪等'),
    sa.Column('execution_node', sa.TEXT(), autoincrement=False, nullable=True, comment='执行此任务的节点或服务实例标识，用于分布式环境下的任务分配和故障排查'),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='当前重试次数'),
    sa.Column('max_retries', sa.INTEGER(), server_default=sa.text('3'), autoincrement=False, nullable=False, comment='最大允许重试次数'),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='任务开始执行的时间戳'),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='任务完成的时间戳'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='任务创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='任务状态最后更新时间'),
    sa.CheckConstraint("(status <> ALL (ARRAY['COMPLETED'::task_status, 'FAILED'::task_status])) OR (status = ANY (ARRAY['COMPLETED'::task_status, 'FAILED'::task_status])) AND completed_at IS NOT NULL", name=op.f('check_completed_has_timestamp')),
    sa.CheckConstraint("status <> 'COMPLETED'::task_status OR status = 'COMPLETED'::task_status AND result_data IS NOT NULL", name=op.f('check_completed_has_result')),
    sa.CheckConstraint("status <> 'FAILED'::task_status OR status = 'FAILED'::task_status AND error_data IS NOT NULL", name=op.f('check_failed_has_error')),
    sa.CheckConstraint("status <> 'RUNNING'::task_status OR status = 'RUNNING'::task_status AND started_at IS NOT NULL", name=op.f('check_running_has_started')),
    sa.CheckConstraint('max_retries >= 0', name=op.f('check_max_retries_non_negative')),
    sa.CheckConstraint('progress >= 0.0 AND progress <= 100.0', name=op.f('check_progress_range')),
    sa.CheckConstraint('retry_count >= 0 AND retry_count <= max_retries', name=op.f('check_retry_count_valid')),
    sa.ForeignKeyConstraint(['triggered_by_command_id'], ['command_inbox.id'], name=op.f('fk_async_tasks_command'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('async_tasks_pkey')),
    comment='通用的异步任务表，用于追踪所有后台技术任务（如调用LLM）的执行状态。'
    )
    op.create_index(op.f('idx_async_tasks_type_created'), 'async_tasks', ['task_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_async_tasks_task_type'), 'async_tasks', ['task_type'], unique=False)
    op.create_index(op.f('idx_async_tasks_status_type'), 'async_tasks', ['status', 'task_type'], unique=False)
    op.create_index(op.f('idx_async_tasks_status_created'), 'async_tasks', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_async_tasks_status'), 'async_tasks', ['status'], unique=False)
    op.create_index(op.f('idx_async_tasks_retry_analysis'), 'async_tasks', ['task_type', 'retry_count', 'status'], unique=False)
    op.create_index(op.f('idx_async_tasks_result_data_gin'), 'async_tasks', ['result_data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_async_tasks_input_data_gin'), 'async_tasks', ['input_data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_async_tasks_execution_node'), 'async_tasks', ['execution_node'], unique=False, postgresql_where='(execution_node IS NOT NULL)')
    op.create_index(op.f('idx_async_tasks_execution_monitoring'), 'async_tasks', ['status', 'execution_node', 'started_at'], unique=False, postgresql_where="(status = 'RUNNING'::task_status)")
    op.create_index(op.f('idx_async_tasks_error_data_gin'), 'async_tasks', ['error_data'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_async_tasks_created_at'), 'async_tasks', ['created_at'], unique=False)
    op.create_index(op.f('idx_async_tasks_command_id'), 'async_tasks', ['triggered_by_command_id'], unique=False, postgresql_where='(triggered_by_command_id IS NOT NULL)')
    op.create_table('characters',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='角色唯一标识符，对应Neo4j中的app_id'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=False, comment='所属小说ID，外键关联novels表'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='角色姓名，必填'),
    sa.Column('role', sa.VARCHAR(length=50), autoincrement=False, nullable=True, comment='角色定位，如"主角"、"反派"、"配角"等'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='角色外观、特征等描述信息'),
    sa.Column('background_story', sa.TEXT(), autoincrement=False, nullable=True, comment='角色背景故事，包括身世、经历等'),
    sa.Column('personality_traits', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='性格特征数组，如["勇敢", "正直", "幽默"]'),
    sa.Column('goals', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='角色目标数组，如["寻找失散的妹妹", "成为最强剑士"]'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='角色创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='角色信息最后更新时间'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('characters_novel_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('characters_pkey')),
    comment='存储小说中所有角色的详细设定信息。'
    )
    op.create_index(op.f('idx_characters_novel_role'), 'characters', ['novel_id', 'role'], unique=False)
    op.create_index(op.f('idx_characters_novel_id'), 'characters', ['novel_id'], unique=False)
    op.create_index(op.f('idx_characters_name_search'), 'characters', [sa.literal_column("to_tsvector('simple'::regconfig, name::text)")], unique=False, postgresql_using='gin')
    op.create_table('story_arcs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='故事弧唯一标识符'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=False, comment='所属小说ID，外键关联novels表'),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='故事弧标题，如"主角觉醒篇"、"魔王讨伐篇"'),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True, comment='故事弧概要，描述这条线索的主要内容和发展'),
    sa.Column('start_chapter_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='故事弧开始的章节号'),
    sa.Column('end_chapter_number', sa.INTEGER(), autoincrement=False, nullable=True, comment='故事弧结束的章节号'),
    sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'PLANNED'::character varying"), autoincrement=False, nullable=True, comment='故事弧状态，如PLANNED(已规划)、ACTIVE(进行中)、COMPLETED(已完成)'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='故事弧创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='故事弧最后更新时间'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('story_arcs_novel_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('story_arcs_pkey')),
    comment='存储主要的情节线或故事阶段的规划。'
    )
    op.create_index(op.f('idx_story_arcs_novel_id'), 'story_arcs', ['novel_id'], unique=False)
    op.create_table('genesis_sessions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='创世会话的唯一标识符'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=True, comment='流程完成后关联的小说ID，外键关联novels表，允许为空（流程未完成时）'),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True, comment='发起创世流程的用户ID，用于权限控制和用户关联'),
    sa.Column('status', postgresql.ENUM('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='genesis_status'), server_default=sa.text("'IN_PROGRESS'::genesis_status"), autoincrement=False, nullable=False, comment='整个创世会话的状态，使用genesis_status枚举'),
    sa.Column('current_stage', postgresql.ENUM('CONCEPT_SELECTION', 'STORY_CONCEPTION', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesis_stage'), server_default=sa.text("'CONCEPT_SELECTION'::genesis_stage"), autoincrement=False, nullable=False, comment='当前所处的业务阶段，使用genesis_stage枚举'),
    sa.Column('confirmed_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='存储每个阶段已确认的最终数据，JSONB格式，包含各阶段的输出结果'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创世会话创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='创世会话最后更新时间'),
    sa.CheckConstraint("current_stage = 'CONCEPT_SELECTION'::genesis_stage AND status = 'IN_PROGRESS'::genesis_status OR current_stage = 'STORY_CONCEPTION'::genesis_stage AND status = 'IN_PROGRESS'::genesis_status OR current_stage = 'WORLDVIEW'::genesis_stage AND status = 'IN_PROGRESS'::genesis_status OR current_stage = 'CHARACTERS'::genesis_stage AND status = 'IN_PROGRESS'::genesis_status OR current_stage = 'PLOT_OUTLINE'::genesis_stage AND status = 'IN_PROGRESS'::genesis_status OR current_stage = 'FINISHED'::genesis_stage AND (status = ANY (ARRAY['COMPLETED'::genesis_status, 'ABANDONED'::genesis_status]))", name=op.f('check_genesis_stage_progression')),
    sa.CheckConstraint("status <> 'COMPLETED'::genesis_status OR status = 'COMPLETED'::genesis_status AND novel_id IS NOT NULL", name=op.f('check_completed_has_novel')),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('genesis_sessions_novel_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('genesis_sessions_pkey')),
    comment='作为创世流程的"状态快照"，用于高效查询当前流程的状态，其状态由领域事件驱动更新。'
    )
    op.create_index(op.f('idx_genesis_user_sessions'), 'genesis_sessions', ['user_id', 'status', 'created_at'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_user_status'), 'genesis_sessions', ['user_id', 'status'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_user_id'), 'genesis_sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_status_stage'), 'genesis_sessions', ['status', 'current_stage'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_status'), 'genesis_sessions', ['status'], unique=False)
    op.create_index(op.f('idx_genesis_sessions_novel_id'), 'genesis_sessions', ['novel_id'], unique=False, postgresql_where='(novel_id IS NOT NULL)')
    op.create_index(op.f('idx_genesis_sessions_current_stage'), 'genesis_sessions', ['current_stage'], unique=False)
    op.create_index(op.f('idx_genesis_flow_analysis'), 'genesis_sessions', ['status', 'current_stage', 'created_at'], unique=False)
    op.create_table('flow_resume_handles',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='句柄记录的唯一标识符'),
    sa.Column('correlation_id', sa.TEXT(), autoincrement=False, nullable=False, comment='关联ID，用于将句柄与业务实体关联，如task_id或command_id'),
    sa.Column('flow_run_id', sa.TEXT(), autoincrement=False, nullable=True, comment='Prefect工作流运行的唯一标识符'),
    sa.Column('task_name', sa.TEXT(), autoincrement=False, nullable=True, comment='暂停的任务名称，便于识别和调试'),
    sa.Column('resume_handle', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False, comment='Prefect提供的完整恢复句柄，JSONB格式，包含恢复工作流所需的所有信息'),
    sa.Column('status', postgresql.ENUM('PENDING_PAUSE', 'PAUSED', 'RESUMED', 'EXPIRED', name='handle_status'), server_default=sa.text("'PENDING_PAUSE'::handle_status"), autoincrement=False, nullable=False, comment='句柄状态，使用handle_status枚举'),
    sa.Column('resume_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='提前到达的恢复数据，用于解决时序竞态条件'),
    sa.Column('timeout_seconds', sa.INTEGER(), autoincrement=False, nullable=True, comment='句柄的超时时间（秒），超时后自动标记为过期'),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='额外的上下文信息，JSONB格式，包含恢复时可能需要的业务数据'),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='句柄过期时间，超过此时间的句柄将无法使用'),
    sa.Column('resumed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='实际恢复工作流的时间戳'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='句柄记录创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='句柄记录最后更新时间'),
    sa.CheckConstraint("(status <> ALL (ARRAY['PAUSED'::handle_status, 'RESUMED'::handle_status])) OR (status = ANY (ARRAY['PAUSED'::handle_status, 'RESUMED'::handle_status])) AND resume_handle IS NOT NULL", name=op.f('check_paused_has_handle')),
    sa.CheckConstraint("status <> 'RESUMED'::handle_status OR status = 'RESUMED'::handle_status AND resumed_at IS NOT NULL", name=op.f('check_resumed_has_timestamp')),
    sa.CheckConstraint('expires_at IS NULL OR expires_at > created_at', name=op.f('check_expires_after_created')),
    sa.CheckConstraint('timeout_seconds IS NULL OR timeout_seconds > 0', name=op.f('check_timeout_positive')),
    sa.PrimaryKeyConstraint('id', name=op.f('flow_resume_handles_pkey')),
    comment='持久化存储Prefect工作流的暂停/恢复句柄，以应对缓存失效，确保系统容错性。'
    )
    op.create_index(op.f('idx_flow_resume_handles_unique_correlation'), 'flow_resume_handles', ['correlation_id'], unique=True, postgresql_where="(status = ANY (ARRAY['PENDING_PAUSE'::handle_status, 'PAUSED'::handle_status]))")
    op.create_index(op.f('idx_flow_resume_handles_status_expires'), 'flow_resume_handles', ['status', 'expires_at'], unique=False)
    op.create_index(op.f('idx_flow_resume_handles_status'), 'flow_resume_handles', ['status'], unique=False)
    op.create_index(op.f('idx_flow_resume_handles_resume_handle_gin'), 'flow_resume_handles', ['resume_handle'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_flow_resume_handles_flow_run_id'), 'flow_resume_handles', ['flow_run_id'], unique=False, postgresql_where='(flow_run_id IS NOT NULL)')
    op.create_index(op.f('idx_flow_resume_handles_expires_at'), 'flow_resume_handles', ['expires_at'], unique=False, postgresql_where='(expires_at IS NOT NULL)')
    op.create_index(op.f('idx_flow_resume_handles_correlation_status'), 'flow_resume_handles', ['correlation_id', 'status'], unique=False)
    op.create_index(op.f('idx_flow_resume_handles_correlation_id'), 'flow_resume_handles', ['correlation_id'], unique=False)
    op.create_index(op.f('idx_flow_resume_handles_context_data_gin'), 'flow_resume_handles', ['context_data'], unique=False, postgresql_using='gin')
    op.create_table('worldview_entries',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='条目唯一标识符，与Neo4j图数据库中节点的app_id属性对应'),
    sa.Column('novel_id', sa.UUID(), autoincrement=False, nullable=False, comment='所属小说ID，外键关联novels表'),
    sa.Column('entry_type', postgresql.ENUM('LOCATION', 'ORGANIZATION', 'TECHNOLOGY', 'LAW', 'CONCEPT', 'EVENT', 'ITEM', 'CULTURE', 'SPECIES', 'OTHER', name='worldview_entry_type'), autoincrement=False, nullable=False, comment='条目类型，使用worldview_entry_type枚举，包括LOCATION(地点)、ORGANIZATION(组织)、TECHNOLOGY(科技)、LAW(法则)、CONCEPT(概念)、EVENT(事件)、ITEM(物品)、CULTURE(文化)、SPECIES(种族)、OTHER(其他)'),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False, comment='条目名称，如"魔法学院"、"时空传送门"等，同一小说内按类型唯一'),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True, comment='条目详细描述，包含其特征、作用、历史等信息'),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True, comment='标签数组，用于分类和快速检索，如["魔法", "禁地", "古代遗迹"]'),
    sa.Column('version', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=False, comment='乐观锁版本号，用于并发控制'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='条目创建时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='条目最后更新时间'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], name=op.f('worldview_entries_novel_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('worldview_entries_pkey')),
    sa.UniqueConstraint('novel_id', 'name', 'entry_type', name=op.f('worldview_entries_novel_id_name_entry_type_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='存储世界观中的所有设定条目，如地点、组织、物品等。'
    )
    op.create_index(op.f('idx_worldview_entries_type_novel'), 'worldview_entries', ['entry_type', 'novel_id'], unique=False)
    op.create_index(op.f('idx_worldview_entries_tags_gin'), 'worldview_entries', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_worldview_entries_novel_id'), 'worldview_entries', ['novel_id'], unique=False)
    op.create_index(op.f('idx_worldview_entries_name_search'), 'worldview_entries', [sa.literal_column("to_tsvector('simple'::regconfig, (name::text || ' '::text) || COALESCE(description, ''::text))")], unique=False, postgresql_using='gin')
    op.create_table('chapter_versions',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='章节版本的唯一标识符'),
    sa.Column('chapter_id', sa.UUID(), autoincrement=False, nullable=False, comment='关联的章节ID，外键关联chapters表'),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False, comment='版本号，从1开始递增，同一章节内唯一'),
    sa.Column('content_url', sa.TEXT(), autoincrement=False, nullable=False, comment='指向MinIO中该版本内容的URL'),
    sa.Column('word_count', sa.INTEGER(), autoincrement=False, nullable=True, comment='该版本的字数统计'),
    sa.Column('created_by_agent_type', postgresql.ENUM('worldsmith', 'plotmaster', 'outliner', 'director', 'character_expert', 'worldbuilder', 'writer', 'critic', 'fact_checker', 'rewriter', name='agent_type'), autoincrement=False, nullable=False, comment='创建此版本的AI智能体类型'),
    sa.Column('change_reason', sa.TEXT(), autoincrement=False, nullable=True, comment='修改原因说明，如"根据评论家意见修改"'),
    sa.Column('parent_version_id', sa.UUID(), autoincrement=False, nullable=True, comment='指向上一个版本的ID，形成版本链'),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='存储与此版本相关的额外元数据，JSONB格式'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='版本创建时间'),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], name=op.f('chapter_versions_chapter_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['chapter_versions.id'], name=op.f('chapter_versions_parent_version_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('chapter_versions_pkey')),
    sa.UniqueConstraint('chapter_id', 'version_number', name=op.f('chapter_versions_chapter_id_version_number_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='存储一个章节的每一次具体内容的迭代版本，实现版本控制。'
    )
    op.create_index(op.f('idx_chapter_versions_parent_chain'), 'chapter_versions', ['parent_version_id'], unique=False, postgresql_where='(parent_version_id IS NOT NULL)')
    op.create_index(op.f('idx_chapter_versions_chapter_id'), 'chapter_versions', ['chapter_id'], unique=False)
    op.create_index(op.f('idx_chapter_versions_agent_created'), 'chapter_versions', ['created_by_agent_type', 'created_at'], unique=False)
    op.create_index(op.f('idx_agent_workload_analysis'), 'chapter_versions', ['created_by_agent_type', 'created_at'], unique=False)
    op.create_table('command_inbox',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False, comment='命令记录的唯一标识符'),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=False, comment='关联的会话ID，用于限定命令的作用域和权限控制'),
    sa.Column('command_type', sa.TEXT(), autoincrement=False, nullable=False, comment='命令类型标识，如"RequestConceptGeneration"、"UpdateWorldview"等'),
    sa.Column('idempotency_key', sa.TEXT(), autoincrement=False, nullable=False, comment='幂等键，用于防止重复处理同一命令，通常是业务层面的唯一标识'),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='命令的参数和数据，JSONB格式，包含执行命令所需的所有信息'),
    sa.Column('status', postgresql.ENUM('RECEIVED', 'PROCESSING', 'COMPLETED', 'FAILED', name='command_status'), server_default=sa.text("'RECEIVED'::command_status"), autoincrement=False, nullable=False, comment='命令处理状态，使用command_status枚举'),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True, comment='命令处理失败时的详细错误信息'),
    sa.Column('retry_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False, comment='命令重试次数，用于重试机制和故障排查'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='命令接收时间'),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False, comment='命令状态最后更新时间'),
    sa.CheckConstraint("status <> 'FAILED'::command_status OR status = 'FAILED'::command_status AND error_message IS NOT NULL", name=op.f('check_failed_has_error_message')),
    sa.CheckConstraint('retry_count >= 0', name=op.f('check_retry_count_non_negative')),
    sa.PrimaryKeyConstraint('id', name=op.f('command_inbox_pkey')),
    comment='命令收件箱，通过唯一性约束为需要异步处理的命令提供幂等性保证。'
    )
    op.create_index(op.f('idx_command_inbox_unique_pending_command'), 'command_inbox', ['session_id', 'command_type'], unique=True, postgresql_where="(status = ANY (ARRAY['RECEIVED'::command_status, 'PROCESSING'::command_status]))")
    op.create_index(op.f('idx_command_inbox_status_created'), 'command_inbox', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_command_inbox_status'), 'command_inbox', ['status'], unique=False)
    op.create_index(op.f('idx_command_inbox_session_status'), 'command_inbox', ['session_id', 'status'], unique=False)
    op.create_index(op.f('idx_command_inbox_session_id'), 'command_inbox', ['session_id'], unique=False)
    op.create_index(op.f('idx_command_inbox_retry_status'), 'command_inbox', ['retry_count', 'status', 'created_at'], unique=False, postgresql_where="(status = ANY (ARRAY['RECEIVED'::command_status, 'PROCESSING'::command_status, 'FAILED'::command_status]))")
    op.create_index(op.f('idx_command_inbox_payload_gin'), 'command_inbox', ['payload'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_command_inbox_idempotency_key'), 'command_inbox', ['idempotency_key'], unique=True)
    op.create_index(op.f('idx_command_inbox_created_at'), 'command_inbox', ['created_at'], unique=False)
    op.create_index(op.f('idx_command_inbox_command_type'), 'command_inbox', ['command_type'], unique=False)
    op.drop_index(op.f('ix_sessions_refresh_token'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_jti'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_ip_address'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_id'), table_name='sessions')
    op.drop_index('idx_session_user_active', table_name='sessions')
    op.drop_index('idx_session_refresh_token_active', table_name='sessions')
    op.drop_index('idx_session_jti_active', table_name='sessions')
    op.drop_index('idx_session_expires', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index(op.f('ix_email_verifications_token'), table_name='email_verifications')
    op.drop_index(op.f('ix_email_verifications_id'), table_name='email_verifications')
    op.drop_index('idx_verification_user_purpose', table_name='email_verifications')
    op.drop_index('idx_verification_token', table_name='email_verifications')
    op.drop_index('idx_verification_expires', table_name='email_verifications')
    op.drop_table('email_verifications')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('idx_user_locked_until', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
