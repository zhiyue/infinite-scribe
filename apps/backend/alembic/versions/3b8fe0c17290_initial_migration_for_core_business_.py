"""Initial migration for core business models

Revision ID: 3b8fe0c17290
Revises: 
Create Date: 2025-07-09 17:03:59.026603

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3b8fe0c17290'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('command_inbox',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('command_type', sa.Text(), nullable=False),
    sa.Column('idempotency_key', sa.Text(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('RECEIVED', 'PROCESSING', 'COMPLETED', 'FAILED', name='commandstatus'), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(status != 'FAILED') OR (status = 'FAILED' AND error_message IS NOT NULL)", name='check_failed_has_error_message'),
    sa.CheckConstraint('retry_count >= 0', name='check_retry_count_non_negative'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key')
    )
    op.create_index('idx_command_inbox_command_type', 'command_inbox', ['command_type'], unique=False)
    op.create_index('idx_command_inbox_created_at', 'command_inbox', ['created_at'], unique=False)
    op.create_index('idx_command_inbox_session_id', 'command_inbox', ['session_id'], unique=False)
    op.create_index('idx_command_inbox_session_status', 'command_inbox', ['session_id', 'status'], unique=False)
    op.create_index('idx_command_inbox_status', 'command_inbox', ['status'], unique=False)
    op.create_index('idx_command_inbox_status_created', 'command_inbox', ['status', 'created_at'], unique=False)
    op.create_index('idx_command_inbox_unique_pending_command', 'command_inbox', ['session_id', 'command_type'], unique=True)
    op.create_table('concept_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('core_idea', sa.String(length=200), nullable=False),
    sa.Column('description', sa.String(length=800), nullable=False),
    sa.Column('philosophical_depth', sa.String(length=1000), nullable=False),
    sa.Column('emotional_core', sa.String(length=500), nullable=False),
    sa.Column('philosophical_category', sa.String(length=100), nullable=True),
    sa.Column('thematic_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('complexity_level', sa.String(length=20), nullable=False),
    sa.Column('universal_appeal', sa.Boolean(), nullable=False),
    sa.Column('cultural_specificity', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_by', sa.String(length=50), server_default='system', nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('domain_events',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('event_id', sa.UUID(), nullable=False),
    sa.Column('correlation_id', sa.UUID(), nullable=True),
    sa.Column('causation_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.Text(), nullable=False),
    sa.Column('event_version', sa.Integer(), nullable=False),
    sa.Column('aggregate_type', sa.Text(), nullable=False),
    sa.Column('aggregate_id', sa.Text(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event_id')
    )
    op.create_index('idx_domain_events_aggregate', 'domain_events', ['aggregate_type', 'aggregate_id'], unique=False)
    op.create_index('idx_domain_events_aggregate_type_time', 'domain_events', ['aggregate_type', 'created_at'], unique=False)
    op.create_index('idx_domain_events_causation_id', 'domain_events', ['causation_id'], unique=False)
    op.create_index('idx_domain_events_correlation_id', 'domain_events', ['correlation_id'], unique=False)
    op.create_index('idx_domain_events_created_at', 'domain_events', ['created_at'], unique=False)
    op.create_index('idx_domain_events_event_type', 'domain_events', ['event_type'], unique=False)
    op.create_index('idx_domain_events_event_type_time', 'domain_events', ['event_type', 'created_at'], unique=False)
    op.create_table('event_outbox',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('topic', sa.Text(), nullable=False),
    sa.Column('key', sa.Text(), nullable=True),
    sa.Column('partition_key', sa.Text(), nullable=True),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('headers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'SENT', name='outboxstatus'), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(status != 'SENT') OR (status = 'SENT' AND sent_at IS NOT NULL)", name='check_sent_has_timestamp'),
    sa.CheckConstraint('max_retries >= 0', name='check_max_retries_non_negative'),
    sa.CheckConstraint('retry_count >= 0 AND retry_count <= max_retries', name='check_retry_count_valid'),
    sa.CheckConstraint('scheduled_at IS NULL OR scheduled_at >= created_at', name='check_scheduled_at_future'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_event_outbox_created_at', 'event_outbox', ['created_at'], unique=False)
    op.create_index('idx_event_outbox_key', 'event_outbox', ['key'], unique=False)
    op.create_index('idx_event_outbox_partition_key', 'event_outbox', ['partition_key'], unique=False)
    op.create_index('idx_event_outbox_pending_scheduled', 'event_outbox', ['status', 'scheduled_at'], unique=False)
    op.create_index('idx_event_outbox_retry_count', 'event_outbox', ['retry_count'], unique=False)
    op.create_index('idx_event_outbox_status', 'event_outbox', ['status'], unique=False)
    op.create_index('idx_event_outbox_status_created', 'event_outbox', ['status', 'created_at'], unique=False)
    op.create_index('idx_event_outbox_topic', 'event_outbox', ['topic'], unique=False)
    op.create_index('idx_event_outbox_topic_status', 'event_outbox', ['topic', 'status'], unique=False)
    op.create_table('flow_resume_handles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('correlation_id', sa.Text(), nullable=False),
    sa.Column('flow_run_id', sa.Text(), nullable=True),
    sa.Column('task_name', sa.Text(), nullable=True),
    sa.Column('resume_handle', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.Enum('PENDING_PAUSE', 'PAUSED', 'RESUMED', 'EXPIRED', name='handlestatus'), nullable=False),
    sa.Column('resume_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True),
    sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('resumed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(status != 'RESUMED') OR (status = 'RESUMED' AND resumed_at IS NOT NULL)", name='check_resumed_has_timestamp'),
    sa.CheckConstraint("(status NOT IN ('PAUSED', 'RESUMED')) OR (status IN ('PAUSED', 'RESUMED') AND resume_handle IS NOT NULL)", name='check_paused_has_handle'),
    sa.CheckConstraint('expires_at IS NULL OR expires_at > created_at', name='check_expires_after_created'),
    sa.CheckConstraint('timeout_seconds IS NULL OR timeout_seconds > 0', name='check_timeout_positive'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_flow_resume_handles_correlation_id', 'flow_resume_handles', ['correlation_id'], unique=False)
    op.create_index('idx_flow_resume_handles_correlation_status', 'flow_resume_handles', ['correlation_id', 'status'], unique=False)
    op.create_index('idx_flow_resume_handles_expires_at', 'flow_resume_handles', ['expires_at'], unique=False)
    op.create_index('idx_flow_resume_handles_flow_run_id', 'flow_resume_handles', ['flow_run_id'], unique=False)
    op.create_index('idx_flow_resume_handles_status', 'flow_resume_handles', ['status'], unique=False)
    op.create_index('idx_flow_resume_handles_status_expires', 'flow_resume_handles', ['status', 'expires_at'], unique=False)
    op.create_index('idx_flow_resume_handles_unique_correlation', 'flow_resume_handles', ['correlation_id'], unique=True)
    op.create_table('novels',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('theme', sa.Text(), nullable=True),
    sa.Column('writing_style', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('GENESIS', 'GENERATING', 'PAUSED', 'COMPLETED', 'FAILED', name='novelstatus'), nullable=False),
    sa.Column('target_chapters', sa.Integer(), nullable=False),
    sa.Column('completed_chapters', sa.Integer(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=True),
    sa.Column('last_name', sa.String(length=100), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('bio', sa.String(length=1000), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('last_login_ip', sa.String(length=45), nullable=True),
    sa.Column('email_verified_at', sa.DateTime(), nullable=True),
    sa.Column('password_changed_at', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_email_active', 'users', ['email', 'is_active'], unique=False)
    op.create_index('idx_user_locked_until', 'users', ['locked_until'], unique=False)
    op.create_index('idx_user_username_active', 'users', ['username', 'is_active'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('async_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('task_type', sa.Text(), nullable=False),
    sa.Column('triggered_by_command_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='taskstatus'), nullable=False),
    sa.Column('progress', sa.Numeric(precision=5, scale=2), nullable=False),
    sa.Column('input_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('error_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('execution_node', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(status != 'COMPLETED') OR (status = 'COMPLETED' AND result_data IS NOT NULL)", name='check_completed_has_result'),
    sa.CheckConstraint("(status != 'FAILED') OR (status = 'FAILED' AND error_data IS NOT NULL)", name='check_failed_has_error'),
    sa.CheckConstraint("(status != 'RUNNING') OR (status = 'RUNNING' AND started_at IS NOT NULL)", name='check_running_has_started'),
    sa.CheckConstraint("(status NOT IN ('COMPLETED', 'FAILED')) OR (status IN ('COMPLETED', 'FAILED') AND completed_at IS NOT NULL)", name='check_completed_has_timestamp'),
    sa.CheckConstraint('max_retries >= 0', name='check_max_retries_non_negative'),
    sa.CheckConstraint('progress >= 0.0 AND progress <= 100.0', name='check_progress_range'),
    sa.CheckConstraint('retry_count >= 0 AND retry_count <= max_retries', name='check_retry_count_valid'),
    sa.ForeignKeyConstraint(['triggered_by_command_id'], ['command_inbox.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_async_tasks_command_id', 'async_tasks', ['triggered_by_command_id'], unique=False)
    op.create_index('idx_async_tasks_created_at', 'async_tasks', ['created_at'], unique=False)
    op.create_index('idx_async_tasks_execution_node', 'async_tasks', ['execution_node'], unique=False)
    op.create_index('idx_async_tasks_status', 'async_tasks', ['status'], unique=False)
    op.create_index('idx_async_tasks_status_created', 'async_tasks', ['status', 'created_at'], unique=False)
    op.create_index('idx_async_tasks_status_type', 'async_tasks', ['status', 'task_type'], unique=False)
    op.create_index('idx_async_tasks_task_type', 'async_tasks', ['task_type'], unique=False)
    op.create_index('idx_async_tasks_type_created', 'async_tasks', ['task_type', 'created_at'], unique=False)
    op.create_table('chapters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('novel_id', sa.UUID(), nullable=False),
    sa.Column('chapter_number', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('status', sa.Enum('DRAFT', 'REVIEWING', 'REVISING', 'PUBLISHED', name='chapterstatus'), nullable=False),
    sa.Column('published_version_id', sa.UUID(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('novel_id', 'chapter_number')
    )
    op.create_table('characters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('novel_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('background_story', sa.Text(), nullable=True),
    sa.Column('personality_traits', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('goals', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('email_verifications',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('purpose', sa.Enum('EMAIL_VERIFY', 'PASSWORD_RESET', name='verificationpurpose'), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('used_at', sa.DateTime(), nullable=True),
    sa.Column('requested_from_ip', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_verification_expires', 'email_verifications', ['expires_at'], unique=False)
    op.create_index('idx_verification_token', 'email_verifications', ['token'], unique=False)
    op.create_index('idx_verification_user_purpose', 'email_verifications', ['user_id', 'purpose'], unique=False)
    op.create_index(op.f('ix_email_verifications_id'), 'email_verifications', ['id'], unique=False)
    op.create_index(op.f('ix_email_verifications_token'), 'email_verifications', ['token'], unique=True)
    op.create_table('genesis_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('novel_id', sa.UUID(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('IN_PROGRESS', 'COMPLETED', 'ABANDONED', name='genesisstatus'), nullable=False),
    sa.Column('current_stage', sa.Enum('CONCEPT_SELECTION', 'STORY_CONCEPTION', 'WORLDVIEW', 'CHARACTERS', 'PLOT_OUTLINE', 'FINISHED', name='genesisstage'), nullable=False),
    sa.Column('confirmed_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("(status != 'COMPLETED') OR (status = 'COMPLETED' AND novel_id IS NOT NULL)", name='check_completed_has_novel'),
    sa.CheckConstraint("\n            (current_stage = 'CONCEPT_SELECTION' AND status = 'IN_PROGRESS') OR\n            (current_stage = 'STORY_CONCEPTION' AND status = 'IN_PROGRESS') OR\n            (current_stage = 'WORLDVIEW' AND status = 'IN_PROGRESS') OR\n            (current_stage = 'CHARACTERS' AND status = 'IN_PROGRESS') OR\n            (current_stage = 'PLOT_OUTLINE' AND status = 'IN_PROGRESS') OR\n            (current_stage = 'FINISHED' AND status IN ('COMPLETED', 'ABANDONED'))\n            ", name='check_genesis_stage_progression'),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_genesis_sessions_current_stage', 'genesis_sessions', ['current_stage'], unique=False)
    op.create_index('idx_genesis_sessions_novel_id', 'genesis_sessions', ['novel_id'], unique=False)
    op.create_index('idx_genesis_sessions_status', 'genesis_sessions', ['status'], unique=False)
    op.create_index('idx_genesis_sessions_status_stage', 'genesis_sessions', ['status', 'current_stage'], unique=False)
    op.create_index('idx_genesis_sessions_user_id', 'genesis_sessions', ['user_id'], unique=False)
    op.create_index('idx_genesis_sessions_user_status', 'genesis_sessions', ['user_id', 'status'], unique=False)
    op.create_table('sessions',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('jti', sa.String(length=255), nullable=False),
    sa.Column('refresh_token', sa.String(length=500), nullable=False),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('device_name', sa.String(length=100), nullable=True),
    sa.Column('access_token_expires_at', sa.DateTime(), nullable=False),
    sa.Column('refresh_token_expires_at', sa.DateTime(), nullable=False),
    sa.Column('last_accessed_at', sa.DateTime(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', sa.DateTime(), nullable=True),
    sa.Column('revoke_reason', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_session_expires', 'sessions', ['access_token_expires_at', 'refresh_token_expires_at'], unique=False)
    op.create_index('idx_session_jti_active', 'sessions', ['jti', 'is_active'], unique=False)
    op.create_index('idx_session_refresh_token_active', 'sessions', ['refresh_token', 'is_active'], unique=False)
    op.create_index('idx_session_user_active', 'sessions', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_sessions_id'), 'sessions', ['id'], unique=False)
    op.create_index(op.f('ix_sessions_ip_address'), 'sessions', ['ip_address'], unique=False)
    op.create_index(op.f('ix_sessions_jti'), 'sessions', ['jti'], unique=True)
    op.create_index(op.f('ix_sessions_refresh_token'), 'sessions', ['refresh_token'], unique=True)
    op.create_table('story_arcs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('novel_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('start_chapter_number', sa.Integer(), nullable=True),
    sa.Column('end_chapter_number', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('worldview_entries',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('novel_id', sa.UUID(), nullable=False),
    sa.Column('entry_type', sa.Enum('LOCATION', 'ORGANIZATION', 'TECHNOLOGY', 'LAW', 'CONCEPT', 'EVENT', 'ITEM', 'CULTURE', 'SPECIES', 'OTHER', name='worldviewentrytype'), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tags', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['novel_id'], ['novels.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('novel_id', 'name', 'entry_type')
    )
    op.create_table('chapter_versions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chapter_id', sa.UUID(), nullable=False),
    sa.Column('version_number', sa.Integer(), nullable=False),
    sa.Column('content_url', sa.Text(), nullable=False),
    sa.Column('word_count', sa.Integer(), nullable=True),
    sa.Column('created_by_agent_type', sa.Enum('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'), nullable=False),
    sa.Column('change_reason', sa.Text(), nullable=True),
    sa.Column('parent_version_id', sa.UUID(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_version_id'], ['chapter_versions.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('chapter_id', 'version_number')
    )
    op.create_table('reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('chapter_id', sa.UUID(), nullable=False),
    sa.Column('chapter_version_id', sa.UUID(), nullable=False),
    sa.Column('agent_type', sa.Enum('WORLDSMITH', 'PLOTMASTER', 'OUTLINER', 'DIRECTOR', 'CHARACTER_EXPERT', 'WORLDBUILDER', 'WRITER', 'CRITIC', 'FACT_CHECKER', 'REWRITER', name='agenttype'), nullable=False),
    sa.Column('review_type', sa.String(length=50), nullable=False),
    sa.Column('score', sa.Numeric(precision=3, scale=1), nullable=True),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('is_consistent', sa.Boolean(), nullable=True),
    sa.Column('issues_found', sa.ARRAY(sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['chapter_version_id'], ['chapter_versions.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('reviews')
    op.drop_table('chapter_versions')
    op.drop_table('worldview_entries')
    op.drop_table('story_arcs')
    op.drop_index(op.f('ix_sessions_refresh_token'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_jti'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_ip_address'), table_name='sessions')
    op.drop_index(op.f('ix_sessions_id'), table_name='sessions')
    op.drop_index('idx_session_user_active', table_name='sessions')
    op.drop_index('idx_session_refresh_token_active', table_name='sessions')
    op.drop_index('idx_session_jti_active', table_name='sessions')
    op.drop_index('idx_session_expires', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('idx_genesis_sessions_user_status', table_name='genesis_sessions')
    op.drop_index('idx_genesis_sessions_user_id', table_name='genesis_sessions')
    op.drop_index('idx_genesis_sessions_status_stage', table_name='genesis_sessions')
    op.drop_index('idx_genesis_sessions_status', table_name='genesis_sessions')
    op.drop_index('idx_genesis_sessions_novel_id', table_name='genesis_sessions')
    op.drop_index('idx_genesis_sessions_current_stage', table_name='genesis_sessions')
    op.drop_table('genesis_sessions')
    op.drop_index(op.f('ix_email_verifications_token'), table_name='email_verifications')
    op.drop_index(op.f('ix_email_verifications_id'), table_name='email_verifications')
    op.drop_index('idx_verification_user_purpose', table_name='email_verifications')
    op.drop_index('idx_verification_token', table_name='email_verifications')
    op.drop_index('idx_verification_expires', table_name='email_verifications')
    op.drop_table('email_verifications')
    op.drop_table('characters')
    op.drop_table('chapters')
    op.drop_index('idx_async_tasks_type_created', table_name='async_tasks')
    op.drop_index('idx_async_tasks_task_type', table_name='async_tasks')
    op.drop_index('idx_async_tasks_status_type', table_name='async_tasks')
    op.drop_index('idx_async_tasks_status_created', table_name='async_tasks')
    op.drop_index('idx_async_tasks_status', table_name='async_tasks')
    op.drop_index('idx_async_tasks_execution_node', table_name='async_tasks')
    op.drop_index('idx_async_tasks_created_at', table_name='async_tasks')
    op.drop_index('idx_async_tasks_command_id', table_name='async_tasks')
    op.drop_table('async_tasks')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_username_active', table_name='users')
    op.drop_index('idx_user_locked_until', table_name='users')
    op.drop_index('idx_user_email_active', table_name='users')
    op.drop_table('users')
    op.drop_table('novels')
    op.drop_index('idx_flow_resume_handles_unique_correlation', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_status_expires', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_status', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_flow_run_id', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_expires_at', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_correlation_status', table_name='flow_resume_handles')
    op.drop_index('idx_flow_resume_handles_correlation_id', table_name='flow_resume_handles')
    op.drop_table('flow_resume_handles')
    op.drop_index('idx_event_outbox_topic_status', table_name='event_outbox')
    op.drop_index('idx_event_outbox_topic', table_name='event_outbox')
    op.drop_index('idx_event_outbox_status_created', table_name='event_outbox')
    op.drop_index('idx_event_outbox_status', table_name='event_outbox')
    op.drop_index('idx_event_outbox_retry_count', table_name='event_outbox')
    op.drop_index('idx_event_outbox_pending_scheduled', table_name='event_outbox')
    op.drop_index('idx_event_outbox_partition_key', table_name='event_outbox')
    op.drop_index('idx_event_outbox_key', table_name='event_outbox')
    op.drop_index('idx_event_outbox_created_at', table_name='event_outbox')
    op.drop_table('event_outbox')
    op.drop_index('idx_domain_events_event_type_time', table_name='domain_events')
    op.drop_index('idx_domain_events_event_type', table_name='domain_events')
    op.drop_index('idx_domain_events_created_at', table_name='domain_events')
    op.drop_index('idx_domain_events_correlation_id', table_name='domain_events')
    op.drop_index('idx_domain_events_causation_id', table_name='domain_events')
    op.drop_index('idx_domain_events_aggregate_type_time', table_name='domain_events')
    op.drop_index('idx_domain_events_aggregate', table_name='domain_events')
    op.drop_table('domain_events')
    op.drop_table('concept_templates')
    op.drop_index('idx_command_inbox_unique_pending_command', table_name='command_inbox')
    op.drop_index('idx_command_inbox_status_created', table_name='command_inbox')
    op.drop_index('idx_command_inbox_status', table_name='command_inbox')
    op.drop_index('idx_command_inbox_session_status', table_name='command_inbox')
    op.drop_index('idx_command_inbox_session_id', table_name='command_inbox')
    op.drop_index('idx_command_inbox_created_at', table_name='command_inbox')
    op.drop_index('idx_command_inbox_command_type', table_name='command_inbox')
    op.drop_table('command_inbox')
    # ### end Alembic commands ###
