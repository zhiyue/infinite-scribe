[project]
name = "infinite-scribe-backend"
version = "0.1.0"
description = "Infinite Scribe - AI-powered collaborative novel creation platform"
requires-python = ">=3.11"

dependencies = [
    # Core Web Framework
    "fastapi~=0.115.13",
    "pydantic~=2.11.7",
    "pydantic-settings~=2.6.0",
    "uvicorn[standard]~=0.32.0",
    # Databases
    "asyncpg~=0.30.0",
    "neo4j~=5.26.0",
    "redis~=5.2.0",
    "pymilvus~=2.4.9",
    # AI/ML Providers
    "openai~=1.54.0",
    "anthropic~=0.39.0",
    "litellm~=1.52.0",
    "langfuse~=2.25.0",
    # Infrastructure
    "aiokafka~=0.11.0",
    "prefect~=2.19.0",
    "minio~=7.2.10",
    # Utilities
    "python-dotenv~=1.0.1",
    "structlog~=24.4.0",
    "httpx~=0.27.0",
    "tenacity~=9.0.0",
    "pyyaml~=6.0.2",
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "resend>=2.10.0",
    "slowapi>=0.1.9",
    "alembic>=1.16.2",
    "sqlalchemy[mypy]>=2.0.41",
    "psycopg2-binary>=2.9.10",
]

[dependency-groups]
dev = [
    # Testing
    "pytest~=8.3.3",
    "pytest-asyncio~=0.24.0",
    "pytest-cov~=6.0.0",
    "pytest-mock~=3.14.0",
    "testcontainers~=4.8.0",
    # Code Quality
    "ruff~=0.7.2",
    "black~=24.10.0",
    "mypy~=1.13.0",
    "types-pyyaml~=6.0.12",
    "types-redis~=4.6.0",
    # Development Tools
    "ipdb~=0.13.13",
    "rich~=13.9.2",
    "watchdog~=6.0.0",
    "pre-commit~=4.0.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [
    ".venv",
    "build",
    "dist",
    "tests/fixtures",
    ".git",
    "__pycache__",
    "*.egg-info",
]
src = ["src"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "W",    # pycodestyle warnings
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "RUF012", # mutable class attributes should be annotated with ClassVar
]
fixable = ["ALL"]

[tool.ruff.format]
# 引号风格
quote-style = "double"  # 可选: "double" (默认), "single", "preserve"

# 缩进风格
indent-style = "space"  # 可选: "space" (默认), "tab"

# 跳过魔术逗号
skip-magic-trailing-comma = false

# 行尾处理
line-ending = "auto"

# Black configuration
[tool.black]
line-length = 120                      # 与 Ruff 保持一致
target-version = ["py311"]             # 目标 Python 版本 3.11
extend-exclude = '''
/(
    \.git
  | \.venv
  | __pycache__
  | \.pytest_cache
  | \.mypy_cache
  | \.ruff_cache
  | .*\.egg-info
)/
'''

# Pytest configuration
[tool.pytest.ini_options]
pythonpath = [
    ".",
    "src",
]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_docker: Tests that require Docker containers",
    "requires_remote: Tests that require remote database connections",
]

# Mypy configuration
[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR"
python_version = "3.11"
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = false
disallow_any_generics = false

[[tool.mypy.overrides]]
module = "sqlalchemy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/.venv/*",
    "*/conftest.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv", "__pycache__"]
skips = ["B101"]  # Skip assert_used test

# Pyright configuration for Python type checking
# Note: $schema field removed to avoid "unknown config option" errors
# Note: stubPath removed - type stubs are installed via uv (types-redis, types-pyyaml)
[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/__pycache__",
    "**/.pytest_cache",
    "**/*.egg-info",
    ".venv",
    "venv",
    "node_modules",
    "build",
    "dist",
]
pythonVersion = "3.11"
venvPath = "."
venv = ".venv"
typeCheckingMode = "basic"                            # 类型检查模式: basic(基础)、standard(标准)、strict(严格)
reportMissingImports = "none"                         # 是否报告缺失的导入(none: 不报告)
reportMissingTypeStubs = "none"                       # 是否报告缺失的类型存根文件(none: 不报告)
reportPrivateImportUsage = "none"                     # 是否报告私有导入的使用(none: 不报告)
reportUnusedImport = "warning"                        # 是否报告未使用的导入(warning: 警告)
reportUnusedVariable = "warning"                      # 是否报告未使用的变量(warning: 警告)
reportDuplicateImport = "warning"                     # 是否报告重复的导入(warning: 警告)
reportOptionalMemberAccess = "warning"                # 是否报告可选成员访问(如 Optional[T] 的属性访问)(warning: 警告)
reportGeneralTypeIssues = "error"                     # 是否报告一般类型问题(error: 错误)
reportUntypedFunctionDecorator = "none"               # 是否报告未标注类型的函数装饰器(none: 不报告)
reportUntypedClassDecorator = "none"                  # 是否报告未标注类型的类装饰器(none: 不报告)
reportUntypedBaseClass = "none"                       # 是否报告未标注类型的基类(none: 不报告)
reportUnknownParameterType = "none"                   # 是否报告未知的参数类型(none: 不报告)
reportUnknownVariableType = "none"                    # 是否报告未知的变量类型(none: 不报告)
reportUnknownMemberType = "none"                      # 是否报告未知的成员类型(none: 不报告)
reportMissingParameterType = "none"                   # 是否报告缺失的参数类型(none: 不报告)
reportUnnecessaryIsInstance = "warning"               # 是否报告不必要的 isinstance 调用(warning: 警告)
reportUnnecessaryCast = "warning"                     # 是否报告不必要的类型转换(warning: 警告)
reportImplicitStringConcatenation = "none"            # 是否报告隐式字符串连接(none: 不报告)
reportCallInDefaultInitializer = "none"               # 是否报告在默认初始化器中的调用(none: 不报告)
reportUnnecessaryComparison = "warning"               # 是否报告不必要的比较(warning: 警告)
reportSelfClsParameterName = "warning"                # 是否报告 self/cls 参数名错误(warning: 警告)
reportImplicitOverride = "none"                       # 是否报告隐式重写(none: 不报告)
reportShadowedImports = "warning"                     # 是否报告被遮蔽的导入(warning: 警告)
useLibraryCodeForTypes = true                         # 是否使用库代码进行类型推断(true: 是)
reportUnnecessaryTypeIgnoreComment = false            # 是否报告不必要的 type: ignore 注释(false: 否)

[[tool.pyright.executionEnvironments]]
root = "."
pythonVersion = "3.11"
pythonPlatform = "Linux"
extraPaths = ["src"]
