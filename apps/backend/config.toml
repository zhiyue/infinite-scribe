# Infinite Scribe Backend Configuration
# 支持环境变量插值，使用 ${VAR_NAME} 或 ${VAR_NAME:-default_value} 语法

# ========================================
# 根级别配置 (顶层字段，被 Settings 类直接读取)
# ========================================

# Service Configuration
service_name = "infinite-scribe-backend"
service_type = "api-gateway"
node_env = "${NODE_ENV:-development}"

# API Settings
api_host = "${API_HOST:-0.0.0.0}"
api_port = "${API_PORT:-8000}"
frontend_url = "${FRONTEND_URL:-http://localhost:5173}"
allowed_origins = ["*"]

# Kafka
kafka_host = "${KAFKA_HOST:-localhost}"
kafka_port = "${KAFKA_PORT:-9092}"
kafka_auto_offset_reset = "${KAFKA_AUTO_OFFSET_RESET:-earliest}"
kafka_group_id_prefix = "${KAFKA_GROUP_ID_PREFIX:-infinite-scribe}"

# Milvus
milvus_host = "${MILVUS_HOST:-localhost}"
milvus_port = "${MILVUS_PORT:-19530}"

# MinIO
minio_endpoint = "${MINIO_ENDPOINT:-localhost:9000}"
minio_access_key = "${MINIO_ACCESS_KEY:-minioadmin}"
minio_secret_key = "${MINIO_SECRET_KEY:-minioadmin}"

# Prefect
prefect_api_url = "${PREFECT_API_URL:-http://localhost:4200/api}"

# AI Providers
openai_api_key = "${OPENAI_API_KEY:-}"
anthropic_api_key = "${ANTHROPIC_API_KEY:-}"

# LiteLLM Proxy
litellm_api_host = "${LITELLM_API_HOST:-}"
litellm_api_key = "${LITELLM_API_KEY:-}"

# Embedding API
embedding_api_host = "${EMBEDDING_API_HOST:-localhost}"
embedding_api_port = "${EMBEDDING_API_PORT:-11434}"
embedding_api_model = "${EMBEDDING_API_MODEL:-nomic-embed-text}"

# Logging
log_level = "${LOG_LEVEL:-INFO}"
log_format = "${LOG_FORMAT:-%(asctime)s - %(name)s - %(levelname)s - %(message)s}"

# ========================================
# 嵌套段配置 (对应 Settings 类的嵌套模型)
# ========================================

[auth]
# JWT 配置
jwt_secret_key = "${AUTH__JWT_SECRET_KEY:-test_jwt_secret_key_for_development_only_32_chars}"
jwt_algorithm = "${AUTH__JWT_ALGORITHM:-HS256}"
access_token_expire_minutes = "${AUTH__ACCESS_TOKEN_EXPIRE_MINUTES:-15}"
refresh_token_expire_days = "${AUTH__REFRESH_TOKEN_EXPIRE_DAYS:-7}"

# 邮件服务
resend_api_key = "${AUTH__RESEND_API_KEY:-test_api_key}"
resend_domain = "${AUTH__RESEND_DOMAIN:-test.example.com}"
resend_from_email = "${AUTH__RESEND_FROM_EMAIL:-noreply@example.com}"
use_maildev = "${AUTH__USE_MAILDEV:-false}"
maildev_host = "${AUTH__MAILDEV_HOST:-localhost}"
maildev_port = "${AUTH__MAILDEV_PORT:-1025}"

# 安全设置
password_min_length = "${AUTH__PASSWORD_MIN_LENGTH:-8}"
account_lockout_attempts = "${AUTH__ACCOUNT_LOCKOUT_ATTEMPTS:-5}"
account_lockout_duration_minutes = "${AUTH__ACCOUNT_LOCKOUT_DURATION_MINUTES:-30}"

# 限流设置
rate_limit_login_per_minute = "${AUTH__RATE_LIMIT_LOGIN_PER_MINUTE:-5}"
rate_limit_register_per_hour = "${AUTH__RATE_LIMIT_REGISTER_PER_HOUR:-10}"
rate_limit_password_reset_per_hour = "${AUTH__RATE_LIMIT_PASSWORD_RESET_PER_HOUR:-3}"

# 验证设置
email_verification_expire_hours = "${AUTH__EMAIL_VERIFICATION_EXPIRE_HOURS:-24}"
password_reset_expire_hours = "${AUTH__PASSWORD_RESET_EXPIRE_HOURS:-1}"

# 会话管理
session_strategy = "${AUTH__SESSION_STRATEGY:-multi_device}"
max_sessions_per_user = "${AUTH__MAX_SESSIONS_PER_USER:-10}"

[database]
# PostgreSQL
postgres_host = "${DATABASE__POSTGRES_HOST:-localhost}"
postgres_port = "${DATABASE__POSTGRES_PORT:-5432}"
postgres_user = "${DATABASE__POSTGRES_USER:-postgres}"
postgres_password = "${DATABASE__POSTGRES_PASSWORD:-postgres}"
postgres_db = "${DATABASE__POSTGRES_DB:-infinite_scribe}"

# Neo4j
neo4j_host = "${DATABASE__NEO4J_HOST:-localhost}"
neo4j_port = "${DATABASE__NEO4J_PORT:-7687}"
neo4j_user = "${DATABASE__NEO4J_USER:-neo4j}"
neo4j_password = "${DATABASE__NEO4J_PASSWORD:-neo4j}"
neo4j_uri = "${DATABASE__NEO4J_URI:-}"

# Redis
redis_host = "${DATABASE__REDIS_HOST:-localhost}"
redis_port = "${DATABASE__REDIS_PORT:-6379}"
redis_password = "${DATABASE__REDIS_PASSWORD:-}"

# ----------------------------------------
# 统一后端启动器配置
# - 支持单/多进程模式（P1 手动选择，P3 自动推荐）
# - P1 仅聚焦 API + Agents；不直接编排外部基础设施（Kafka/Postgres/Redis/Neo4j/MinIO/Prefect），
#   由 `pnpm infra` 负责。启动器仅进行就绪性检测与提示。
# - 管理端点（如 /admin/launcher/status）建议仅在开发环境启用；生产需鉴权并仅绑定 127.0.0.1。
# ----------------------------------------

[launcher]
# 运行模式：single|multi（P3 可选 auto）
default_mode = "${LAUNCHER__DEFAULT_MODE:-single}"
# 启动组件：可选 api、agents、relay、eventbridge（逗号分隔数组）
components = ["api", "agents", "relay", "eventbridge"]
# 健康检查间隔（秒）：默认 1Hz
health_interval = 1.0

[launcher.api]
# API Gateway 启动参数（开发环境可开启 reload）
host = "${LAUNCHER__API__HOST:-0.0.0.0}"
port = "${LAUNCHER__API__PORT:-8000}"
reload = true

[launcher.agents]
# 启动的 agents 列表；留空表示使用内置可用列表
# names = ["worldsmith", "plotmaster"]

# 环境变量覆盖（数组）：建议使用 JSON 字符串表示，Pydantic 会自动解析
# 例如：
#   LAUNCHER__AGENTS__NAMES='["worldsmith","plotmaster"]'
# 也可以在 .env 中设置同名键，效果等同。

[relay]
# Outbox Relay 配置（可用环境变量覆盖）
poll_interval_seconds = "${RELAY__POLL_INTERVAL_SECONDS:-5}"
batch_size = "${RELAY__BATCH_SIZE:-100}"
retry_backoff_ms = "${RELAY__RETRY_BACKOFF_MS:-1000}"
max_retries_default = "${RELAY__MAX_RETRIES_DEFAULT:-3}"
yield_sleep_ms = "${RELAY__YIELD_SLEEP_MS:-100}"
loop_error_backoff_ms = "${RELAY__LOOP_ERROR_BACKOFF_MS:-1000}"
max_backoff_ms = "${RELAY__MAX_BACKOFF_MS:-60000}"

[eventbridge]
# EventBridge (Kafka -> SSE) 配置
# 消费的领域事件主题列表
domain_topics = ["genesis.session.events"]
# 支持多主题配置，例如：
# domain_topics = ["genesis.session.events", "chapter.session.events", "review.session.events"]

# Kafka 消费组配置
group_id_suffix = "${EVENTBRIDGE__GROUP_ID_SUFFIX:-event-bridge}"

# 熔断器配置
cb_window_seconds = "${EVENTBRIDGE__CB_WINDOW_SECONDS:-10}"
cb_fail_rate_threshold = "${EVENTBRIDGE__CB_FAIL_RATE_THRESHOLD:-0.5}"
cb_half_open_interval_seconds = "${EVENTBRIDGE__CB_HALF_OPEN_INTERVAL_SECONDS:-30}"

# 偏移量提交配置
commit_interval_ms = "${EVENTBRIDGE__COMMIT_INTERVAL_MS:-5000}"
commit_batch_size = "${EVENTBRIDGE__COMMIT_BATCH_SIZE:-100}"

# 日志配置
log_level = "${EVENTBRIDGE__LOG_LEVEL:-INFO}"
metrics_log_interval = "${EVENTBRIDGE__METRICS_LOG_INTERVAL:-100}"