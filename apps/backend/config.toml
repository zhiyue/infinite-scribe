# Infinite Scribe Backend Configuration
# 支持环境变量插值，使用 ${VAR_NAME} 或 ${VAR_NAME:-default_value} 语法

[service]
name = "infinite-scribe-backend"
type = "api-gateway"
node_env = "${NODE_ENV:-development}"

[api]
host = "${API_HOST:-0.0.0.0}"
port = "${API_PORT:-8000}"
frontend_url = "${FRONTEND_URL:-http://localhost:3000}"
allowed_origins = ["*"]
## 说明：Settings 使用顶层字段 `api_host`/`api_port`，而非本小节；
## Launcher 启动参数请使用 `[launcher.api]` 配置。

[auth]
# JWT 配置
jwt_secret_key = "${AUTH__JWT_SECRET_KEY:-test_jwt_secret_key_for_development_only_32_chars}"
jwt_algorithm = "${AUTH__JWT_ALGORITHM:-HS256}"
access_token_expire_minutes = "${AUTH__ACCESS_TOKEN_EXPIRE_MINUTES:-15}"
refresh_token_expire_days = "${AUTH__REFRESH_TOKEN_EXPIRE_DAYS:-7}"

# 邮件服务
resend_api_key = "${AUTH__RESEND_API_KEY:-test_api_key}"
resend_domain = "${AUTH__RESEND_DOMAIN:-test.example.com}"
resend_from_email = "${AUTH__RESEND_FROM_EMAIL:-noreply@example.com}"
use_maildev = "${AUTH__USE_MAILDEV:-false}"
maildev_host = "${AUTH__MAILDEV_HOST:-localhost}"
maildev_port = "${AUTH__MAILDEV_PORT:-1025}"

# 安全设置
password_min_length = "${AUTH__PASSWORD_MIN_LENGTH:-8}"
account_lockout_attempts = "${AUTH__ACCOUNT_LOCKOUT_ATTEMPTS:-5}"
account_lockout_duration_minutes = "${AUTH__ACCOUNT_LOCKOUT_DURATION_MINUTES:-30}"

# 限流设置
rate_limit_login_per_minute = "${AUTH__RATE_LIMIT_LOGIN_PER_MINUTE:-5}"
rate_limit_register_per_hour = "${AUTH__RATE_LIMIT_REGISTER_PER_HOUR:-10}"
rate_limit_password_reset_per_hour = "${AUTH__RATE_LIMIT_PASSWORD_RESET_PER_HOUR:-3}"

# 验证设置
email_verification_expire_hours = "${AUTH__EMAIL_VERIFICATION_EXPIRE_HOURS:-24}"
password_reset_expire_hours = "${AUTH__PASSWORD_RESET_EXPIRE_HOURS:-1}"

# 会话管理
session_strategy = "${AUTH__SESSION_STRATEGY:-multi_device}"
max_sessions_per_user = "${AUTH__MAX_SESSIONS_PER_USER:-10}"

[database]
# PostgreSQL
postgres_host = "${DATABASE__POSTGRES_HOST:-localhost}"
postgres_port = "${DATABASE__POSTGRES_PORT:-5432}"
postgres_user = "${DATABASE__POSTGRES_USER:-postgres}"
postgres_password = "${DATABASE__POSTGRES_PASSWORD:-postgres}"
postgres_db = "${DATABASE__POSTGRES_DB:-infinite_scribe}"

# Neo4j
neo4j_host = "${DATABASE__NEO4J_HOST:-localhost}"
neo4j_port = "${DATABASE__NEO4J_PORT:-7687}"
neo4j_user = "${DATABASE__NEO4J_USER:-neo4j}"
neo4j_password = "${DATABASE__NEO4J_PASSWORD:-neo4j}"
neo4j_uri = "${DATABASE__NEO4J_URI:-}"

# Redis
redis_host = "${DATABASE__REDIS_HOST:-localhost}"
redis_port = "${DATABASE__REDIS_PORT:-6379}"
redis_password = "${DATABASE__REDIS_PASSWORD:-}"

[kafka]
host = "${KAFKA_HOST:-localhost}"
port = "${KAFKA_PORT:-9092}"
auto_offset_reset = "${KAFKA_AUTO_OFFSET_RESET:-earliest}"
group_id_prefix = "${KAFKA_GROUP_ID_PREFIX:-infinite-scribe}"

[milvus]
host = "${MILVUS_HOST:-localhost}"
port = "${MILVUS_PORT:-19530}"

[minio]
endpoint = "${MINIO_ENDPOINT:-localhost:9000}"
access_key = "${MINIO_ACCESS_KEY:-minioadmin}"
secret_key = "${MINIO_SECRET_KEY:-minioadmin}"

[prefect]
api_url = "${PREFECT_API_URL:-http://localhost:4200/api}"

[ai_providers]
openai_api_key = "${OPENAI_API_KEY:-}"
anthropic_api_key = "${ANTHROPIC_API_KEY:-}"

[litellm]
api_host = "${LITELLM_API_HOST:-}"
api_key = "${LITELLM_API_KEY:-}"

[embedding]
api_host = "${EMBEDDING_API_HOST:-localhost}"
api_port = "${EMBEDDING_API_PORT:-11434}"
api_model = "${EMBEDDING_API_MODEL:-nomic-embed-text}"

[logging]
level = "${LOG_LEVEL:-INFO}"
format = "${LOG_FORMAT:-%(asctime)s - %(name)s - %(levelname)s - %(message)s}"

# ----------------------------------------
# 统一后端启动器配置
# - 支持单/多进程模式（P1 手动选择，P3 自动推荐）
# - P1 仅聚焦 API + Agents；不直接编排外部基础设施（Kafka/Postgres/Redis/Neo4j/MinIO/Prefect），
#   由 `pnpm infra` 负责。启动器仅进行就绪性检测与提示。
# - 管理端点（如 /admin/launcher/status）建议仅在开发环境启用；生产需鉴权并仅绑定 127.0.0.1。
# ----------------------------------------

[launcher]
# 运行模式：single|multi（P3 可选 auto）
default_mode = "${LAUNCHER__DEFAULT_MODE:-single}"
# 启动组件：可选 api、agents（逗号分隔数组）
components = ["api", "agents"]
# 健康检查间隔（秒）：默认 1Hz
health_interval = 1.0

[launcher.api]
# API Gateway 启动参数（开发环境可开启 reload）
host = "${LAUNCHER__API__HOST:-0.0.0.0}"
port = "${LAUNCHER__API__PORT:-8000}"
reload = true

[launcher.agents]
# 启动的 agents 列表；留空表示使用内置可用列表
# names = ["worldsmith", "plotmaster"]

# 环境变量覆盖（数组）：建议使用 JSON 字符串表示，Pydantic 会自动解析
# 例如：
#   LAUNCHER__AGENTS__NAMES='["worldsmith","plotmaster"]'
# 也可以在 .env 中设置同名键，效果等同。
