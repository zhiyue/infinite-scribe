name: Backend Docker Build and Push

on:
  push:
    branches: [main, develop]
    tags: ['v*']
    paths:
      - 'apps/backend/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/backend-docker-build.yml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/backend-docker-build.yml'
  workflow_dispatch:
    inputs:
      tag_suffix:
        description: 'Image tag suffix (e.g., dev, staging, prod)'
        required: false
        default: 'manual'
        type: choice
        options:
          - manual
          - dev
          - staging
          - prod
          - hotfix
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
      build_args:
        description: 'Additional build arguments'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 前置测试和安全扫描 job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install uv
          cd apps/backend
          uv sync --all-extras

      - name: Run tests
        run: |
          cd apps/backend
          uv run pytest tests/ -v

      - name: Run linting
        run: |
          cd apps/backend
          uv run ruff check src/
          uv run mypy src/ --ignore-missing-imports

      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker 构建和推送 job
  build:
    # needs: test  # 临时注释，让构建流程先跑通
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write # 用于 OIDC 认证

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ github.event.inputs.tag_suffix }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_suffix != 'manual' }}
            type=raw,value=manual-${{ github.run_number }},enable=${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_suffix == 'manual' }}
          labels: |
            org.opencontainers.image.title=Infinite Scribe API Gateway
            org.opencontainers.image.description=API Gateway and Agent Services
            org.opencontainers.image.vendor=Infinite Scribe Team
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ github.event.inputs.force_rebuild != 'true' && 'type=gha' || '' }}
          cache-to: ${{ github.event.inputs.force_rebuild != 'true' && 'type=gha,mode=max' || '' }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            ${{ github.event.inputs.build_args }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'CRITICAL'

      - name: Display vulnerability summary
        if: always()
        run: |
          echo "## 🔒 Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 显示扫描结果（如果存在）
          if [ -f "trivy-results.sarif" ]; then
            echo "✅ Trivy scan completed successfully" >> $GITHUB_STEP_SUMMARY
            echo "📋 Results uploaded to GitHub Security tab" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Trivy scan failed or no results file found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Install Cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3.5.0

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          # 添加重试逻辑，因为 sigstore 服务可能偶尔不稳定
          max_attempts=3
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts: Signing container image..."
            
            if timeout 300 cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}; then
              echo "✅ Container image signed successfully"
              exit 0
            else
              echo "❌ Attempt $attempt failed"
              if [ $attempt -lt $max_attempts ]; then
                echo "⏳ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
            
            attempt=$((attempt + 1))
          done

          echo "⚠️ All signing attempts failed, but continuing workflow..."
          echo "This is usually due to temporary sigstore service issues"
          exit 0  # 不阻塞构建过程
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0.14.3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: backend-sbom.spdx.json

      - name: Upload SBOM to release
        if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: backend-sbom
          path: backend-sbom.spdx.json

  # 清理旧镜像 job（按计划运行，避免影响主工作流）
  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    permissions:
      packages: write

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
