name: Python CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/python-ci.yml'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Ruff
      uses: astral-sh/ruff-action@v3
      with:
        src: "./apps/backend"
        args: "check --output-format=github"
    
    - name: Run Ruff format check
      uses: astral-sh/ruff-action@v3
      with:
        src: "./apps/backend"
        args: "format --check"
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: "3.11"
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Type check with mypy
      run: |
        uv run mypy apps/backend/src/ --ignore-missing-imports
    
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      neo4j:
        image: neo4j:5
        env:
          NEO4J_AUTH: neo4j/neo4jtest
          NEO4J_PLUGINS: '["apoc"]'
        ports:
          - 7687:7687
        options: >-
          --health-cmd "cypher-shell -u neo4j -p neo4jtest 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: "3.11"
        enable-cache: true
    
    - name: Install dependencies
      run: |
        uv sync --all-extras
    
    - name: Run unit tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
        NEO4J_HOST: localhost
        NEO4J_PORT: 7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: neo4jtest
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
      run: |
        cd apps/backend
        uv run python -m pytest tests/unit/ -v --cov=src --cov-report=term-missing
    
    - name: Run integration tests
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
        NEO4J_HOST: localhost
        NEO4J_PORT: 7687
        NEO4J_USER: neo4j
        NEO4J_PASSWORD: neo4jtest
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
      run: |
        cd apps/backend
        uv run python -m pytest tests/integration/ -v --cov=src --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        severity: 'CRITICAL,HIGH'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'