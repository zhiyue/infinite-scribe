#!/bin/bash
# 同步前端环境配置脚本
# 将根目录的环境配置转换为 VITE_ 前缀格式，供前端使用

set -e

# 获取脚本所在目录的绝对路径
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# 环境文件路径
ROOT_ENV="$PROJECT_ROOT/.env"
FRONTEND_DIR="$PROJECT_ROOT/apps/frontend"

echo "🔄 同步前端环境配置..."

# 检查根环境文件是否存在
if [[ ! -f "$ROOT_ENV" ]]; then
    echo "❌ 错误: 根目录 .env 文件不存在: $ROOT_ENV"
    exit 1
fi

# 读取当前环境类型
if [[ -L "$ROOT_ENV" ]]; then
    ENV_TYPE=$(basename "$(readlink "$ROOT_ENV")" .env)
    ENV_TYPE=${ENV_TYPE#.env.}
    echo "📍 当前环境: $ENV_TYPE"
else
    echo "⚠️  警告: .env 不是符号链接，使用默认配置"
    ENV_TYPE="dev"
fi

# 目标前端环境文件
FRONTEND_ENV="$FRONTEND_DIR/.env.$ENV_TYPE"

echo "📝 创建前端环境文件: $FRONTEND_ENV"

# 从根环境文件提取配置并转换为 VITE_ 格式
cat > "$FRONTEND_ENV" << EOF
# Frontend Environment Configuration ($ENV_TYPE)
# Auto-generated by sync-frontend-env.sh
# This file contains VITE_ prefixed variables for frontend development

EOF

# 提取相关配置并转换
source "$ROOT_ENV"

# API URL 配置
if [[ -n "$NEXT_PUBLIC_API_URL" ]]; then
    echo "VITE_API_BASE_URL=$NEXT_PUBLIC_API_URL" >> "$FRONTEND_ENV"
elif [[ -n "$API_HOST" && -n "$API_PORT" ]]; then
    if [[ "$API_HOST" == "0.0.0.0" ]]; then
        # 根据环境类型设置正确的主机
        case "$ENV_TYPE" in
            "dev")
                echo "VITE_API_BASE_URL=http://192.168.2.201:$API_PORT" >> "$FRONTEND_ENV"
                ;;
            "test")
                echo "VITE_API_BASE_URL=http://\${TEST_MACHINE_IP:-192.168.2.202}:$API_PORT" >> "$FRONTEND_ENV"
                ;;
            *)
                echo "VITE_API_BASE_URL=http://localhost:$API_PORT" >> "$FRONTEND_ENV"
                ;;
        esac
    else
        echo "VITE_API_BASE_URL=http://$API_HOST:$API_PORT" >> "$FRONTEND_ENV"
    fi
fi

# 其他前端需要的配置可以在这里添加
# 注意：不要暴露后端 API Keys 到前端

# 更新前端 .env 符号链接
cd "$FRONTEND_DIR"
if [[ -L ".env" ]]; then
    rm ".env"
fi
ln -sf ".env.$ENV_TYPE" ".env"

echo "✅ 前端环境配置已同步完成"
echo "📂 文件位置: $FRONTEND_ENV"
echo "🔗 符号链接: $FRONTEND_DIR/.env -> .env.$ENV_TYPE"